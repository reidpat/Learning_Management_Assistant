"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const obsidian = require("obsidian");
const require$$0$1 = require("fs");
const require$$1 = require("path");
const require$$2 = require("os");
const require$$3 = require("crypto");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
const require$$0__default = /* @__PURE__ */ _interopDefaultLegacy(require$$0$1);
const require$$1__default = /* @__PURE__ */ _interopDefaultLegacy(require$$1);
const require$$2__default = /* @__PURE__ */ _interopDefaultLegacy(require$$2);
const require$$3__default = /* @__PURE__ */ _interopDefaultLegacy(require$$3);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var main$2 = { exports: {} };
const name$1 = "dotenv";
const version$2 = "16.1.4";
const description$1 = "Loads environment variables from .env file";
const main$1 = "lib/main.js";
const types$1 = "lib/main.d.ts";
const exports$1 = {
  ".": {
    types: "./lib/main.d.ts",
    require: "./lib/main.js",
    "default": "./lib/main.js"
  },
  "./config": "./config.js",
  "./config.js": "./config.js",
  "./lib/env-options": "./lib/env-options.js",
  "./lib/env-options.js": "./lib/env-options.js",
  "./lib/cli-options": "./lib/cli-options.js",
  "./lib/cli-options.js": "./lib/cli-options.js",
  "./package.json": "./package.json"
};
const scripts$1 = {
  "dts-check": "tsc --project tests/types/tsconfig.json",
  lint: "standard",
  "lint-readme": "standard-markdown",
  pretest: "npm run lint && npm run dts-check",
  test: "tap tests/*.js --100 -Rspec",
  prerelease: "npm test",
  release: "standard-version"
};
const repository$1 = {
  type: "git",
  url: "git://github.com/motdotla/dotenv.git"
};
const funding = "https://github.com/motdotla/dotenv?sponsor=1";
const keywords$1 = [
  "dotenv",
  "env",
  ".env",
  "environment",
  "variables",
  "config",
  "settings"
];
const readmeFilename = "README.md";
const license$1 = "BSD-2-Clause";
const devDependencies$1 = {
  "@definitelytyped/dtslint": "^0.0.133",
  "@types/node": "^18.11.3",
  decache: "^4.6.1",
  sinon: "^14.0.1",
  standard: "^17.0.0",
  "standard-markdown": "^7.1.0",
  "standard-version": "^9.5.0",
  tap: "^16.3.0",
  tar: "^6.1.11",
  typescript: "^4.8.4"
};
const engines = {
  node: ">=12"
};
const browser$1 = {
  fs: false
};
const require$$4 = {
  name: name$1,
  version: version$2,
  description: description$1,
  main: main$1,
  types: types$1,
  exports: exports$1,
  scripts: scripts$1,
  repository: repository$1,
  funding,
  keywords: keywords$1,
  readmeFilename,
  license: license$1,
  devDependencies: devDependencies$1,
  engines,
  browser: browser$1
};
const fs = require$$0__default.default;
const path = require$$1__default.default;
const os = require$$2__default.default;
const crypto$1 = require$$3__default.default;
const packageJson$1 = require$$4;
const version$1 = packageJson$1.version;
const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
function parse(src) {
  const obj = {};
  let lines = src.toString();
  lines = lines.replace(/\r\n?/mg, "\n");
  let match;
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1];
    let value = match[2] || "";
    value = value.trim();
    const maybeQuote = value[0];
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, "\n");
      value = value.replace(/\\r/g, "\r");
    }
    obj[key] = value;
  }
  return obj;
}
function _parseVault(options2) {
  const vaultPath = _vaultPath(options2);
  const result = DotenvModule.configDotenv({ path: vaultPath });
  if (!result.parsed) {
    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
  }
  const keys = _dotenvKey().split(",");
  const length = keys.length;
  let decrypted;
  for (let i = 0; i < length; i++) {
    try {
      const key = keys[i].trim();
      const attrs = _instructions(result, key);
      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
      break;
    } catch (error) {
      if (i + 1 >= length) {
        throw error;
      }
    }
  }
  return DotenvModule.parse(decrypted);
}
function _log(message) {
  console.log(`[dotenv@${version$1}][INFO] ${message}`);
}
function _warn(message) {
  console.log(`[dotenv@${version$1}][WARN] ${message}`);
}
function _debug(message) {
  console.log(`[dotenv@${version$1}][DEBUG] ${message}`);
}
function _dotenvKey() {
  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY;
  }
  return "";
}
function _instructions(result, dotenvKey) {
  let uri;
  try {
    uri = new URL(dotenvKey);
  } catch (error) {
    if (error.code === "ERR_INVALID_URL") {
      throw new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development");
    }
    throw error;
  }
  const key = uri.password;
  if (!key) {
    throw new Error("INVALID_DOTENV_KEY: Missing key part");
  }
  const environment = uri.searchParams.get("environment");
  if (!environment) {
    throw new Error("INVALID_DOTENV_KEY: Missing environment part");
  }
  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
  const ciphertext = result.parsed[environmentKey];
  if (!ciphertext) {
    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
  }
  return { ciphertext, key };
}
function _vaultPath(options2) {
  let dotenvPath = path.resolve(process.cwd(), ".env");
  if (options2 && options2.path && options2.path.length > 0) {
    dotenvPath = options2.path;
  }
  return dotenvPath.endsWith(".vault") ? dotenvPath : `${dotenvPath}.vault`;
}
function _resolveHome(envPath) {
  return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
}
function _configVault(options2) {
  _log("Loading env from encrypted .env.vault");
  const parsed = DotenvModule._parseVault(options2);
  DotenvModule.populate(process.env, parsed, options2);
  return { parsed };
}
function configDotenv(options2) {
  let dotenvPath = path.resolve(process.cwd(), ".env");
  let encoding = "utf8";
  const debug = Boolean(options2 && options2.debug);
  if (options2) {
    if (options2.path != null) {
      dotenvPath = _resolveHome(options2.path);
    }
    if (options2.encoding != null) {
      encoding = options2.encoding;
    }
  }
  try {
    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }));
    DotenvModule.populate(process.env, parsed, options2);
    return { parsed };
  } catch (e) {
    if (debug) {
      _debug(`Failed to load ${dotenvPath} ${e.message}`);
    }
    return { error: e };
  }
}
function config(options2) {
  const vaultPath = _vaultPath(options2);
  if (_dotenvKey().length === 0) {
    return DotenvModule.configDotenv(options2);
  }
  if (!fs.existsSync(vaultPath)) {
    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
    return DotenvModule.configDotenv(options2);
  }
  return DotenvModule._configVault(options2);
}
function decrypt(encrypted, keyStr) {
  const key = Buffer.from(keyStr.slice(-64), "hex");
  let ciphertext = Buffer.from(encrypted, "base64");
  const nonce = ciphertext.slice(0, 12);
  const authTag = ciphertext.slice(-16);
  ciphertext = ciphertext.slice(12, -16);
  try {
    const aesgcm = crypto$1.createDecipheriv("aes-256-gcm", key, nonce);
    aesgcm.setAuthTag(authTag);
    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
  } catch (error) {
    const isRange = error instanceof RangeError;
    const invalidKeyLength = error.message === "Invalid key length";
    const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
    if (isRange || invalidKeyLength) {
      const msg = "INVALID_DOTENV_KEY: It must be 64 characters long (or more)";
      throw new Error(msg);
    } else if (decryptionFailed) {
      const msg = "DECRYPTION_FAILED: Please check your DOTENV_KEY";
      throw new Error(msg);
    } else {
      console.error("Error: ", error.code);
      console.error("Error: ", error.message);
      throw error;
    }
  }
}
function populate(processEnv, parsed, options2 = {}) {
  const debug = Boolean(options2 && options2.debug);
  const override = Boolean(options2 && options2.override);
  if (typeof parsed !== "object") {
    throw new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
  }
  for (const key of Object.keys(parsed)) {
    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key];
      }
      if (debug) {
        if (override === true) {
          _debug(`"${key}" is already defined and WAS overwritten`);
        } else {
          _debug(`"${key}" is already defined and was NOT overwritten`);
        }
      }
    } else {
      processEnv[key] = parsed[key];
    }
  }
}
const DotenvModule = {
  configDotenv,
  _configVault,
  _parseVault,
  config,
  decrypt,
  parse,
  populate
};
main$2.exports.configDotenv = DotenvModule.configDotenv;
main$2.exports._configVault = DotenvModule._configVault;
main$2.exports._parseVault = DotenvModule._parseVault;
main$2.exports.config = DotenvModule.config;
main$2.exports.decrypt = DotenvModule.decrypt;
main$2.exports.parse = DotenvModule.parse;
main$2.exports.populate = DotenvModule.populate;
main$2.exports = DotenvModule;
const options = {};
if (process.env.DOTENV_CONFIG_ENCODING != null) {
  options.encoding = process.env.DOTENV_CONFIG_ENCODING;
}
if (process.env.DOTENV_CONFIG_PATH != null) {
  options.path = process.env.DOTENV_CONFIG_PATH;
}
if (process.env.DOTENV_CONFIG_DEBUG != null) {
  options.debug = process.env.DOTENV_CONFIG_DEBUG;
}
if (process.env.DOTENV_CONFIG_OVERRIDE != null) {
  options.override = process.env.DOTENV_CONFIG_OVERRIDE;
}
var envOptions = options;
const re = /^dotenv_config_(encoding|path|debug|override)=(.+)$/;
var cliOptions = function optionMatcher(args) {
  return args.reduce(function(acc, cur) {
    const matches = cur.match(re);
    if (matches) {
      acc[matches[1]] = matches[2];
    }
    return acc;
  }, {});
};
(function() {
  main$2.exports.config(
    Object.assign(
      {},
      envOptions,
      cliOptions(process.argv)
    )
  );
})();
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function element(name2) {
  return document.createElement(name2);
}
function text(data2) {
  return document.createTextNode(data2);
}
function space() {
  return text(" ");
}
function listen(node, event, handler, options2) {
  node.addEventListener(event, handler, options2);
  return () => node.removeEventListener(event, handler, options2);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
let current_component;
function set_current_component(component) {
  current_component = component;
}
const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
const seen_callbacks = /* @__PURE__ */ new Set();
let flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
const outroing = /* @__PURE__ */ new Set();
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options2, instance2, create_fragment2, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options2.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options2.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options2.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options2.target) {
    if (options2.hydrate) {
      const nodes = children(options2.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options2.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options2.target, options2.anchor, options2.customElement);
    flush();
  }
  set_current_component(parent_component);
}
class SvelteComponent {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
}
var dist$1 = {};
var api = {};
var axios$3 = { exports: {} };
var axios$2 = { exports: {} };
var bind$2 = function bind(fn, thisArg) {
  return function wrap2() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};
var bind$1 = bind$2;
var toString$1 = Object.prototype.toString;
function isArray$1(val) {
  return Array.isArray(val);
}
function isUndefined$1(val) {
  return typeof val === "undefined";
}
function isBuffer(val) {
  return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
function isArrayBuffer(val) {
  return toString$1.call(val) === "[object ArrayBuffer]";
}
function isFormData$1(val) {
  return toString$1.call(val) === "[object FormData]";
}
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
function isString(val) {
  return typeof val === "string";
}
function isNumber(val) {
  return typeof val === "number";
}
function isObject$1(val) {
  return val !== null && typeof val === "object";
}
function isPlainObject(val) {
  if (toString$1.call(val) !== "[object Object]") {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
function isDate$1(val) {
  return toString$1.call(val) === "[object Date]";
}
function isFile(val) {
  return toString$1.call(val) === "[object File]";
}
function isBlob(val) {
  return toString$1.call(val) === "[object Blob]";
}
function isFunction(val) {
  return toString$1.call(val) === "[object Function]";
}
function isStream(val) {
  return isObject$1(val) && isFunction(val.pipe);
}
function isURLSearchParams$1(val) {
  return toString$1.call(val) === "[object URLSearchParams]";
}
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
function isStandardBrowserEnv$1() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function forEach$1(obj, fn) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray$1(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
function merge() {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray$1(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }
  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach$1(arguments[i], assignValue);
  }
  return result;
}
function extend(a, b, thisArg) {
  forEach$1(b, function assignValue(val, key) {
    if (thisArg && typeof val === "function") {
      a[key] = bind$1(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
function stripBOM(content) {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
}
var utils$9 = {
  isArray: isArray$1,
  isArrayBuffer,
  isBuffer,
  isFormData: isFormData$1,
  isArrayBufferView,
  isString,
  isNumber,
  isObject: isObject$1,
  isPlainObject,
  isUndefined: isUndefined$1,
  isDate: isDate$1,
  isFile,
  isBlob,
  isFunction,
  isStream,
  isURLSearchParams: isURLSearchParams$1,
  isStandardBrowserEnv: isStandardBrowserEnv$1,
  forEach: forEach$1,
  merge,
  extend,
  trim,
  stripBOM
};
var utils$8 = utils$9;
function encode$1(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$2 = function buildURL(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$8.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils$8.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (utils$8.isArray(val)) {
        key = key + "[]";
      } else {
        val = [val];
      }
      utils$8.forEach(val, function parseValue(v) {
        if (utils$8.isDate(v)) {
          v = v.toISOString();
        } else if (utils$8.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode$1(key) + "=" + encode$1(v));
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
};
var utils$7 = utils$9;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options2) {
  this.handlers.push({
    fulfilled,
    rejected,
    synchronous: options2 ? options2.synchronous : false,
    runWhen: options2 ? options2.runWhen : null
  });
  return this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
InterceptorManager$1.prototype.forEach = function forEach(fn) {
  utils$7.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};
var InterceptorManager_1 = InterceptorManager$1;
var utils$6 = utils$9;
var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
  utils$6.forEach(headers, function processHeader(value, name2) {
    if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name2];
    }
  });
};
var enhanceError$2 = function enhanceError(error, config2, code2, request2, response) {
  error.config = config2;
  if (code2) {
    error.code = code2;
  }
  error.request = request2;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};
var transitional = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};
var createError$1;
var hasRequiredCreateError;
function requireCreateError() {
  if (hasRequiredCreateError)
    return createError$1;
  hasRequiredCreateError = 1;
  var enhanceError3 = enhanceError$2;
  createError$1 = function createError2(message, config2, code2, request2, response) {
    var error = new Error(message);
    return enhanceError3(error, config2, code2, request2, response);
  };
  return createError$1;
}
var settle$1;
var hasRequiredSettle;
function requireSettle() {
  if (hasRequiredSettle)
    return settle$1;
  hasRequiredSettle = 1;
  var createError2 = requireCreateError();
  settle$1 = function settle2(resolve, reject, response) {
    var validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(createError2(
        "Request failed with status code " + response.status,
        response.config,
        null,
        response.request,
        response
      ));
    }
  };
  return settle$1;
}
var cookies;
var hasRequiredCookies;
function requireCookies() {
  if (hasRequiredCookies)
    return cookies;
  hasRequiredCookies = 1;
  var utils2 = utils$9;
  cookies = utils2.isStandardBrowserEnv() ? function standardBrowserEnv() {
    return {
      write: function write(name2, value, expires, path2, domain, secure) {
        var cookie = [];
        cookie.push(name2 + "=" + encodeURIComponent(value));
        if (utils2.isNumber(expires)) {
          cookie.push("expires=" + new Date(expires).toGMTString());
        }
        if (utils2.isString(path2)) {
          cookie.push("path=" + path2);
        }
        if (utils2.isString(domain)) {
          cookie.push("domain=" + domain);
        }
        if (secure === true) {
          cookie.push("secure");
        }
        document.cookie = cookie.join("; ");
      },
      read: function read(name2) {
        var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove(name2) {
        this.write(name2, "", Date.now() - 864e5);
      }
    };
  }() : function nonStandardBrowserEnv() {
    return {
      write: function write() {
      },
      read: function read() {
        return null;
      },
      remove: function remove() {
      }
    };
  }();
  return cookies;
}
var isAbsoluteURL$1;
var hasRequiredIsAbsoluteURL;
function requireIsAbsoluteURL() {
  if (hasRequiredIsAbsoluteURL)
    return isAbsoluteURL$1;
  hasRequiredIsAbsoluteURL = 1;
  isAbsoluteURL$1 = function isAbsoluteURL2(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  };
  return isAbsoluteURL$1;
}
var combineURLs$1;
var hasRequiredCombineURLs;
function requireCombineURLs() {
  if (hasRequiredCombineURLs)
    return combineURLs$1;
  hasRequiredCombineURLs = 1;
  combineURLs$1 = function combineURLs2(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  };
  return combineURLs$1;
}
var buildFullPath$1;
var hasRequiredBuildFullPath;
function requireBuildFullPath() {
  if (hasRequiredBuildFullPath)
    return buildFullPath$1;
  hasRequiredBuildFullPath = 1;
  var isAbsoluteURL2 = requireIsAbsoluteURL();
  var combineURLs2 = requireCombineURLs();
  buildFullPath$1 = function buildFullPath2(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL2(requestedURL)) {
      return combineURLs2(baseURL, requestedURL);
    }
    return requestedURL;
  };
  return buildFullPath$1;
}
var parseHeaders;
var hasRequiredParseHeaders;
function requireParseHeaders() {
  if (hasRequiredParseHeaders)
    return parseHeaders;
  hasRequiredParseHeaders = 1;
  var utils2 = utils$9;
  var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ];
  parseHeaders = function parseHeaders2(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) {
      return parsed;
    }
    utils2.forEach(headers.split("\n"), function parser(line) {
      i = line.indexOf(":");
      key = utils2.trim(line.substr(0, i)).toLowerCase();
      val = utils2.trim(line.substr(i + 1));
      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }
        if (key === "set-cookie") {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      }
    });
    return parsed;
  };
  return parseHeaders;
}
var isURLSameOrigin;
var hasRequiredIsURLSameOrigin;
function requireIsURLSameOrigin() {
  if (hasRequiredIsURLSameOrigin)
    return isURLSameOrigin;
  hasRequiredIsURLSameOrigin = 1;
  var utils2 = utils$9;
  isURLSameOrigin = utils2.isStandardBrowserEnv() ? function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    function resolveURL(url) {
      var href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin2(requestURL) {
      var parsed = utils2.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }() : function nonStandardBrowserEnv() {
    return function isURLSameOrigin2() {
      return true;
    };
  }();
  return isURLSameOrigin;
}
var Cancel_1;
var hasRequiredCancel;
function requireCancel() {
  if (hasRequiredCancel)
    return Cancel_1;
  hasRequiredCancel = 1;
  function Cancel2(message) {
    this.message = message;
  }
  Cancel2.prototype.toString = function toString2() {
    return "Cancel" + (this.message ? ": " + this.message : "");
  };
  Cancel2.prototype.__CANCEL__ = true;
  Cancel_1 = Cancel2;
  return Cancel_1;
}
var xhr;
var hasRequiredXhr;
function requireXhr() {
  if (hasRequiredXhr)
    return xhr;
  hasRequiredXhr = 1;
  var utils2 = utils$9;
  var settle2 = requireSettle();
  var cookies2 = requireCookies();
  var buildURL3 = buildURL$2;
  var buildFullPath2 = requireBuildFullPath();
  var parseHeaders2 = requireParseHeaders();
  var isURLSameOrigin2 = requireIsURLSameOrigin();
  var createError2 = requireCreateError();
  var transitionalDefaults2 = transitional;
  var Cancel2 = requireCancel();
  xhr = function xhrAdapter(config2) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config2.data;
      var requestHeaders = config2.headers;
      var responseType = config2.responseType;
      var onCanceled;
      function done() {
        if (config2.cancelToken) {
          config2.cancelToken.unsubscribe(onCanceled);
        }
        if (config2.signal) {
          config2.signal.removeEventListener("abort", onCanceled);
        }
      }
      if (utils2.isFormData(requestData)) {
        delete requestHeaders["Content-Type"];
      }
      var request2 = new XMLHttpRequest();
      if (config2.auth) {
        var username = config2.auth.username || "";
        var password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
        requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
      }
      var fullPath = buildFullPath2(config2.baseURL, config2.url);
      request2.open(config2.method.toUpperCase(), buildURL3(fullPath, config2.params, config2.paramsSerializer), true);
      request2.timeout = config2.timeout;
      function onloadend() {
        if (!request2) {
          return;
        }
        var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders2(request2.getAllResponseHeaders()) : null;
        var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
        var response = {
          data: responseData,
          status: request2.status,
          statusText: request2.statusText,
          headers: responseHeaders,
          config: config2,
          request: request2
        };
        settle2(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request2 = null;
      }
      if ("onloadend" in request2) {
        request2.onloadend = onloadend;
      } else {
        request2.onreadystatechange = function handleLoad() {
          if (!request2 || request2.readyState !== 4) {
            return;
          }
          if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request2.onabort = function handleAbort() {
        if (!request2) {
          return;
        }
        reject(createError2("Request aborted", config2, "ECONNABORTED", request2));
        request2 = null;
      };
      request2.onerror = function handleError() {
        reject(createError2("Network Error", config2, null, request2));
        request2 = null;
      };
      request2.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
        var transitional3 = config2.transitional || transitionalDefaults2;
        if (config2.timeoutErrorMessage) {
          timeoutErrorMessage = config2.timeoutErrorMessage;
        }
        reject(createError2(
          timeoutErrorMessage,
          config2,
          transitional3.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
          request2
        ));
        request2 = null;
      };
      if (utils2.isStandardBrowserEnv()) {
        var xsrfValue = (config2.withCredentials || isURLSameOrigin2(fullPath)) && config2.xsrfCookieName ? cookies2.read(config2.xsrfCookieName) : void 0;
        if (xsrfValue) {
          requestHeaders[config2.xsrfHeaderName] = xsrfValue;
        }
      }
      if ("setRequestHeader" in request2) {
        utils2.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
            delete requestHeaders[key];
          } else {
            request2.setRequestHeader(key, val);
          }
        });
      }
      if (!utils2.isUndefined(config2.withCredentials)) {
        request2.withCredentials = !!config2.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request2.responseType = config2.responseType;
      }
      if (typeof config2.onDownloadProgress === "function") {
        request2.addEventListener("progress", config2.onDownloadProgress);
      }
      if (typeof config2.onUploadProgress === "function" && request2.upload) {
        request2.upload.addEventListener("progress", config2.onUploadProgress);
      }
      if (config2.cancelToken || config2.signal) {
        onCanceled = function(cancel) {
          if (!request2) {
            return;
          }
          reject(!cancel || cancel && cancel.type ? new Cancel2("canceled") : cancel);
          request2.abort();
          request2 = null;
        };
        config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
        if (config2.signal) {
          config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
        }
      }
      if (!requestData) {
        requestData = null;
      }
      request2.send(requestData);
    });
  };
  return xhr;
}
var utils$5 = utils$9;
var normalizeHeaderName2 = normalizeHeaderName$1;
var enhanceError$1 = enhanceError$2;
var transitionalDefaults = transitional;
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
  if (!utils$5.isUndefined(headers) && utils$5.isUndefined(headers["Content-Type"])) {
    headers["Content-Type"] = value;
  }
}
function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== "undefined") {
    adapter = requireXhr();
  } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
    adapter = requireXhr();
  }
  return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
  if (utils$5.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$5.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults$3 = {
  transitional: transitionalDefaults,
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data2, headers) {
    normalizeHeaderName2(headers, "Accept");
    normalizeHeaderName2(headers, "Content-Type");
    if (utils$5.isFormData(data2) || utils$5.isArrayBuffer(data2) || utils$5.isBuffer(data2) || utils$5.isStream(data2) || utils$5.isFile(data2) || utils$5.isBlob(data2)) {
      return data2;
    }
    if (utils$5.isArrayBufferView(data2)) {
      return data2.buffer;
    }
    if (utils$5.isURLSearchParams(data2)) {
      setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
      return data2.toString();
    }
    if (utils$5.isObject(data2) || headers && headers["Content-Type"] === "application/json") {
      setContentTypeIfUnset(headers, "application/json");
      return stringifySafely(data2);
    }
    return data2;
  }],
  transformResponse: [function transformResponse(data2) {
    var transitional3 = this.transitional || defaults$3.transitional;
    var silentJSONParsing = transitional3 && transitional3.silentJSONParsing;
    var forcedJSONParsing = transitional3 && transitional3.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
    if (strictJSONParsing || forcedJSONParsing && utils$5.isString(data2) && data2.length) {
      try {
        return JSON.parse(data2);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw enhanceError$1(e, this, "E_JSON_PARSE");
          }
          throw e;
        }
      }
    }
    return data2;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils$5.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults$3.headers[method] = {};
});
utils$5.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults$3.headers[method] = utils$5.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults$3;
var utils$4 = utils$9;
var defaults$2 = defaults_1;
var transformData$1 = function transformData(data2, headers, fns) {
  var context = this || defaults$2;
  utils$4.forEach(fns, function transform(fn) {
    data2 = fn.call(context, data2, headers);
  });
  return data2;
};
var isCancel$1;
var hasRequiredIsCancel;
function requireIsCancel() {
  if (hasRequiredIsCancel)
    return isCancel$1;
  hasRequiredIsCancel = 1;
  isCancel$1 = function isCancel2(value) {
    return !!(value && value.__CANCEL__);
  };
  return isCancel$1;
}
var utils$3 = utils$9;
var transformData2 = transformData$1;
var isCancel = requireIsCancel();
var defaults$1 = defaults_1;
var Cancel = requireCancel();
function throwIfCancellationRequested(config2) {
  if (config2.cancelToken) {
    config2.cancelToken.throwIfRequested();
  }
  if (config2.signal && config2.signal.aborted) {
    throw new Cancel("canceled");
  }
}
var dispatchRequest$1 = function dispatchRequest(config2) {
  throwIfCancellationRequested(config2);
  config2.headers = config2.headers || {};
  config2.data = transformData2.call(
    config2,
    config2.data,
    config2.headers,
    config2.transformRequest
  );
  config2.headers = utils$3.merge(
    config2.headers.common || {},
    config2.headers[config2.method] || {},
    config2.headers
  );
  utils$3.forEach(
    ["delete", "get", "head", "post", "put", "patch", "common"],
    function cleanHeaderConfig(method) {
      delete config2.headers[method];
    }
  );
  var adapter = config2.adapter || defaults$1.adapter;
  return adapter(config2).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config2);
    response.data = transformData2.call(
      config2,
      response.data,
      response.headers,
      config2.transformResponse
    );
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config2);
      if (reason && reason.response) {
        reason.response.data = transformData2.call(
          config2,
          reason.response.data,
          reason.response.headers,
          config2.transformResponse
        );
      }
    }
    return Promise.reject(reason);
  });
};
var utils$2 = utils$9;
var mergeConfig$2 = function mergeConfig(config1, config2) {
  config2 = config2 || {};
  var config3 = {};
  function getMergedValue(target, source) {
    if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
      return utils$2.merge(target, source);
    } else if (utils$2.isPlainObject(source)) {
      return utils$2.merge({}, source);
    } else if (utils$2.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function valueFromConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    }
  }
  function defaultToConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  var mergeMap = {
    "url": valueFromConfig2,
    "method": valueFromConfig2,
    "data": valueFromConfig2,
    "baseURL": defaultToConfig2,
    "transformRequest": defaultToConfig2,
    "transformResponse": defaultToConfig2,
    "paramsSerializer": defaultToConfig2,
    "timeout": defaultToConfig2,
    "timeoutMessage": defaultToConfig2,
    "withCredentials": defaultToConfig2,
    "adapter": defaultToConfig2,
    "responseType": defaultToConfig2,
    "xsrfCookieName": defaultToConfig2,
    "xsrfHeaderName": defaultToConfig2,
    "onUploadProgress": defaultToConfig2,
    "onDownloadProgress": defaultToConfig2,
    "decompress": defaultToConfig2,
    "maxContentLength": defaultToConfig2,
    "maxBodyLength": defaultToConfig2,
    "transport": defaultToConfig2,
    "httpAgent": defaultToConfig2,
    "httpsAgent": defaultToConfig2,
    "cancelToken": defaultToConfig2,
    "socketPath": defaultToConfig2,
    "responseEncoding": defaultToConfig2,
    "validateStatus": mergeDirectKeys
  };
  utils$2.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge2 = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge2(prop);
    utils$2.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
  });
  return config3;
};
var data;
var hasRequiredData;
function requireData() {
  if (hasRequiredData)
    return data;
  hasRequiredData = 1;
  data = {
    "version": "0.26.1"
  };
  return data;
}
var VERSION = requireData().version;
var validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
  validators$1[type] = function validator2(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators$1.transitional = function transitional2(validator2, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return function(value, opt, opts) {
    if (validator2 === false) {
      throw new Error(formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")));
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
function assertOptions(options2, schema, allowUnknown) {
  if (typeof options2 !== "object") {
    throw new TypeError("options must be an object");
  }
  var keys = Object.keys(options2);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator2 = schema[opt];
    if (validator2) {
      var value = options2[opt];
      var result = value === void 0 || validator2(value, opt, options2);
      if (result !== true) {
        throw new TypeError("option " + opt + " must be " + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error("Unknown option " + opt);
    }
  }
}
var validator$1 = {
  assertOptions,
  validators: validators$1
};
var utils$1 = utils$9;
var buildURL$1 = buildURL$2;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest2 = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
var validator = validator$1;
var validators = validator.validators;
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
Axios$1.prototype.request = function request(configOrUrl, config2) {
  if (typeof configOrUrl === "string") {
    config2 = config2 || {};
    config2.url = configOrUrl;
  } else {
    config2 = configOrUrl || {};
  }
  config2 = mergeConfig$1(this.defaults, config2);
  if (config2.method) {
    config2.method = config2.method.toLowerCase();
  } else if (this.defaults.method) {
    config2.method = this.defaults.method.toLowerCase();
  } else {
    config2.method = "get";
  }
  var transitional3 = config2.transitional;
  if (transitional3 !== void 0) {
    validator.assertOptions(transitional3, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
      return;
    }
    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;
  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest2, void 0];
    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);
    promise = Promise.resolve(config2);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }
    return promise;
  }
  var newConfig = config2;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }
  try {
    promise = dispatchRequest2(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }
  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }
  return promise;
};
Axios$1.prototype.getUri = function getUri(config2) {
  config2 = mergeConfig$1(this.defaults, config2);
  return buildURL$1(config2.url, config2.params, config2.paramsSerializer).replace(/^\?/, "");
};
utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios$1.prototype[method] = function(url, config2) {
    return this.request(mergeConfig$1(config2 || {}, {
      method,
      url,
      data: (config2 || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  Axios$1.prototype[method] = function(url, data2, config2) {
    return this.request(mergeConfig$1(config2 || {}, {
      method,
      url,
      data: data2
    }));
  };
});
var Axios_1 = Axios$1;
var CancelToken_1;
var hasRequiredCancelToken;
function requireCancelToken() {
  if (hasRequiredCancelToken)
    return CancelToken_1;
  hasRequiredCancelToken = 1;
  var Cancel2 = requireCancel();
  function CancelToken(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    var token = this;
    this.promise.then(function(cancel) {
      if (!token._listeners)
        return;
      var i;
      var l = token._listeners.length;
      for (i = 0; i < l; i++) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = function(onfulfilled) {
      var _resolve;
      var promise = new Promise(function(resolve) {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message) {
      if (token.reason) {
        return;
      }
      token.reason = new Cancel2(message);
      resolvePromise(token.reason);
    });
  }
  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };
  CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  };
  CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    var index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  };
  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  };
  CancelToken_1 = CancelToken;
  return CancelToken_1;
}
var spread;
var hasRequiredSpread;
function requireSpread() {
  if (hasRequiredSpread)
    return spread;
  hasRequiredSpread = 1;
  spread = function spread2(callback) {
    return function wrap2(arr) {
      return callback.apply(null, arr);
    };
  };
  return spread;
}
var isAxiosError;
var hasRequiredIsAxiosError;
function requireIsAxiosError() {
  if (hasRequiredIsAxiosError)
    return isAxiosError;
  hasRequiredIsAxiosError = 1;
  var utils2 = utils$9;
  isAxiosError = function isAxiosError2(payload) {
    return utils2.isObject(payload) && payload.isAxiosError === true;
  };
  return isAxiosError;
}
var utils = utils$9;
var bind2 = bind$2;
var Axios = Axios_1;
var mergeConfig2 = mergeConfig$2;
var defaults = defaults_1;
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance2 = bind2(Axios.prototype.request, context);
  utils.extend(instance2, Axios.prototype, context);
  utils.extend(instance2, context);
  instance2.create = function create(instanceConfig) {
    return createInstance(mergeConfig2(defaultConfig, instanceConfig));
  };
  return instance2;
}
var axios$1 = createInstance(defaults);
axios$1.Axios = Axios;
axios$1.Cancel = requireCancel();
axios$1.CancelToken = requireCancelToken();
axios$1.isCancel = requireIsCancel();
axios$1.VERSION = requireData().version;
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = requireSpread();
axios$1.isAxiosError = requireIsAxiosError();
axios$2.exports = axios$1;
axios$2.exports.default = axios$1;
(function(module2) {
  module2.exports = axios$2.exports;
})(axios$3);
const axios = /* @__PURE__ */ getDefaultExportFromCjs(axios$3.exports);
var common = {};
var base = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.RequiredError = exports2.BaseAPI = exports2.COLLECTION_FORMATS = exports2.BASE_PATH = void 0;
  const axios_1 = axios$3.exports;
  exports2.BASE_PATH = "https://api.openai.com/v1".replace(/\/+$/, "");
  exports2.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "	",
    pipes: "|"
  };
  class BaseAPI {
    constructor(configuration2, basePath = exports2.BASE_PATH, axios2 = axios_1.default) {
      this.basePath = basePath;
      this.axios = axios2;
      if (configuration2) {
        this.configuration = configuration2;
        this.basePath = configuration2.basePath || this.basePath;
      }
    }
  }
  exports2.BaseAPI = BaseAPI;
  class RequiredError extends Error {
    constructor(field, msg) {
      super(msg);
      this.field = field;
      this.name = "RequiredError";
    }
  }
  exports2.RequiredError = RequiredError;
})(base);
var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(common, "__esModule", { value: true });
common.createRequestFunction = common.toPathString = common.serializeDataIfNeeded = common.setSearchParams = common.setOAuthToObject = common.setBearerAuthToObject = common.setBasicAuthToObject = common.setApiKeyToObject = common.assertParamExists = common.DUMMY_BASE_URL = void 0;
const base_1 = base;
common.DUMMY_BASE_URL = "https://example.com";
common.assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
  }
};
common.setApiKeyToObject = function(object, keyParamName, configuration2) {
  return __awaiter(this, void 0, void 0, function* () {
    if (configuration2 && configuration2.apiKey) {
      const localVarApiKeyValue = typeof configuration2.apiKey === "function" ? yield configuration2.apiKey(keyParamName) : yield configuration2.apiKey;
      object[keyParamName] = localVarApiKeyValue;
    }
  });
};
common.setBasicAuthToObject = function(object, configuration2) {
  if (configuration2 && (configuration2.username || configuration2.password)) {
    object["auth"] = { username: configuration2.username, password: configuration2.password };
  }
};
common.setBearerAuthToObject = function(object, configuration2) {
  return __awaiter(this, void 0, void 0, function* () {
    if (configuration2 && configuration2.accessToken) {
      const accessToken = typeof configuration2.accessToken === "function" ? yield configuration2.accessToken() : yield configuration2.accessToken;
      object["Authorization"] = "Bearer " + accessToken;
    }
  });
};
common.setOAuthToObject = function(object, name2, scopes, configuration2) {
  return __awaiter(this, void 0, void 0, function* () {
    if (configuration2 && configuration2.accessToken) {
      const localVarAccessTokenValue = typeof configuration2.accessToken === "function" ? yield configuration2.accessToken(name2, scopes) : yield configuration2.accessToken;
      object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
  });
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (parameter == null)
    return;
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach((currentKey) => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== "" ? "." : ""}${currentKey}`));
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
common.setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
common.serializeDataIfNeeded = function(value, requestOptions, configuration2) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration2 && configuration2.isJsonMime ? configuration2.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
common.toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
common.createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration2) {
  return (axios2 = globalAxios, basePath = BASE_PATH) => {
    const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: ((configuration2 === null || configuration2 === void 0 ? void 0 : configuration2.basePath) || basePath) + axiosArgs.url });
    return axios2.request(axiosRequestArgs);
  };
};
(function(exports2) {
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.OpenAIApi = exports2.OpenAIApiFactory = exports2.OpenAIApiFp = exports2.OpenAIApiAxiosParamCreator = exports2.CreateImageRequestResponseFormatEnum = exports2.CreateImageRequestSizeEnum = exports2.ChatCompletionResponseMessageRoleEnum = exports2.ChatCompletionRequestMessageRoleEnum = void 0;
  const axios_1 = axios$3.exports;
  const common_1 = common;
  const base_12 = base;
  exports2.ChatCompletionRequestMessageRoleEnum = {
    System: "system",
    User: "user",
    Assistant: "assistant"
  };
  exports2.ChatCompletionResponseMessageRoleEnum = {
    System: "system",
    User: "user",
    Assistant: "assistant"
  };
  exports2.CreateImageRequestSizeEnum = {
    _256x256: "256x256",
    _512x512: "512x512",
    _1024x1024: "1024x1024"
  };
  exports2.CreateImageRequestResponseFormatEnum = {
    Url: "url",
    B64Json: "b64_json"
  };
  exports2.OpenAIApiAxiosParamCreator = function(configuration2) {
    return {
      cancelFineTune: (fineTuneId, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("cancelFineTune", "fineTuneId", fineTuneId);
        const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`.replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createAnswer: (createAnswerRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createAnswer", "createAnswerRequest", createAnswerRequest);
        const localVarPath = `/answers`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createAnswerRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createChatCompletion: (createChatCompletionRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createChatCompletion", "createChatCompletionRequest", createChatCompletionRequest);
        const localVarPath = `/chat/completions`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createChatCompletionRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createClassification: (createClassificationRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createClassification", "createClassificationRequest", createClassificationRequest);
        const localVarPath = `/classifications`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createClassificationRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createCompletion: (createCompletionRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createCompletion", "createCompletionRequest", createCompletionRequest);
        const localVarPath = `/completions`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompletionRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createEdit: (createEditRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createEdit", "createEditRequest", createEditRequest);
        const localVarPath = `/edits`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEditRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createEmbedding: (createEmbeddingRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createEmbedding", "createEmbeddingRequest", createEmbeddingRequest);
        const localVarPath = `/embeddings`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createFile: (file, purpose, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createFile", "file", file);
        common_1.assertParamExists("createFile", "purpose", purpose);
        const localVarPath = `/files`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        const localVarFormParams = new (configuration2 && configuration2.formDataCtor || FormData)();
        if (file !== void 0) {
          localVarFormParams.append("file", file);
        }
        if (purpose !== void 0) {
          localVarFormParams.append("purpose", purpose);
        }
        localVarHeaderParameter["Content-Type"] = "multipart/form-data";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = localVarFormParams;
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createFineTune: (createFineTuneRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createFineTune", "createFineTuneRequest", createFineTuneRequest);
        const localVarPath = `/fine-tunes`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createFineTuneRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createImage: (createImageRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createImage", "createImageRequest", createImageRequest);
        const localVarPath = `/images/generations`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createImageRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createImageEdit: (image, prompt, mask, n, size, responseFormat, user, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createImageEdit", "image", image);
        common_1.assertParamExists("createImageEdit", "prompt", prompt);
        const localVarPath = `/images/edits`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        const localVarFormParams = new (configuration2 && configuration2.formDataCtor || FormData)();
        if (image !== void 0) {
          localVarFormParams.append("image", image);
        }
        if (mask !== void 0) {
          localVarFormParams.append("mask", mask);
        }
        if (prompt !== void 0) {
          localVarFormParams.append("prompt", prompt);
        }
        if (n !== void 0) {
          localVarFormParams.append("n", n);
        }
        if (size !== void 0) {
          localVarFormParams.append("size", size);
        }
        if (responseFormat !== void 0) {
          localVarFormParams.append("response_format", responseFormat);
        }
        if (user !== void 0) {
          localVarFormParams.append("user", user);
        }
        localVarHeaderParameter["Content-Type"] = "multipart/form-data";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = localVarFormParams;
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createImageVariation: (image, n, size, responseFormat, user, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createImageVariation", "image", image);
        const localVarPath = `/images/variations`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        const localVarFormParams = new (configuration2 && configuration2.formDataCtor || FormData)();
        if (image !== void 0) {
          localVarFormParams.append("image", image);
        }
        if (n !== void 0) {
          localVarFormParams.append("n", n);
        }
        if (size !== void 0) {
          localVarFormParams.append("size", size);
        }
        if (responseFormat !== void 0) {
          localVarFormParams.append("response_format", responseFormat);
        }
        if (user !== void 0) {
          localVarFormParams.append("user", user);
        }
        localVarHeaderParameter["Content-Type"] = "multipart/form-data";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = localVarFormParams;
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createModeration: (createModerationRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createModeration", "createModerationRequest", createModerationRequest);
        const localVarPath = `/moderations`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createModerationRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createSearch: (engineId, createSearchRequest, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createSearch", "engineId", engineId);
        common_1.assertParamExists("createSearch", "createSearchRequest", createSearchRequest);
        const localVarPath = `/engines/{engine_id}/search`.replace(`{${"engine_id"}}`, encodeURIComponent(String(engineId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        localVarHeaderParameter["Content-Type"] = "application/json";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = common_1.serializeDataIfNeeded(createSearchRequest, localVarRequestOptions, configuration2);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createTranscription: (file, model, prompt, responseFormat, temperature, language, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createTranscription", "file", file);
        common_1.assertParamExists("createTranscription", "model", model);
        const localVarPath = `/audio/transcriptions`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        const localVarFormParams = new (configuration2 && configuration2.formDataCtor || FormData)();
        if (file !== void 0) {
          localVarFormParams.append("file", file);
        }
        if (model !== void 0) {
          localVarFormParams.append("model", model);
        }
        if (prompt !== void 0) {
          localVarFormParams.append("prompt", prompt);
        }
        if (responseFormat !== void 0) {
          localVarFormParams.append("response_format", responseFormat);
        }
        if (temperature !== void 0) {
          localVarFormParams.append("temperature", temperature);
        }
        if (language !== void 0) {
          localVarFormParams.append("language", language);
        }
        localVarHeaderParameter["Content-Type"] = "multipart/form-data";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = localVarFormParams;
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      createTranslation: (file, model, prompt, responseFormat, temperature, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("createTranslation", "file", file);
        common_1.assertParamExists("createTranslation", "model", model);
        const localVarPath = `/audio/translations`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        const localVarFormParams = new (configuration2 && configuration2.formDataCtor || FormData)();
        if (file !== void 0) {
          localVarFormParams.append("file", file);
        }
        if (model !== void 0) {
          localVarFormParams.append("model", model);
        }
        if (prompt !== void 0) {
          localVarFormParams.append("prompt", prompt);
        }
        if (responseFormat !== void 0) {
          localVarFormParams.append("response_format", responseFormat);
        }
        if (temperature !== void 0) {
          localVarFormParams.append("temperature", temperature);
        }
        localVarHeaderParameter["Content-Type"] = "multipart/form-data";
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options2.headers);
        localVarRequestOptions.data = localVarFormParams;
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      deleteFile: (fileId, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("deleteFile", "fileId", fileId);
        const localVarPath = `/files/{file_id}`.replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      deleteModel: (model, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("deleteModel", "model", model);
        const localVarPath = `/models/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(model)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      downloadFile: (fileId, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("downloadFile", "fileId", fileId);
        const localVarPath = `/files/{file_id}/content`.replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      listEngines: (options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        const localVarPath = `/engines`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      listFiles: (options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        const localVarPath = `/files`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      listFineTuneEvents: (fineTuneId, stream, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("listFineTuneEvents", "fineTuneId", fineTuneId);
        const localVarPath = `/fine-tunes/{fine_tune_id}/events`.replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        if (stream !== void 0) {
          localVarQueryParameter["stream"] = stream;
        }
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      listFineTunes: (options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        const localVarPath = `/fine-tunes`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      listModels: (options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        const localVarPath = `/models`;
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      retrieveEngine: (engineId, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("retrieveEngine", "engineId", engineId);
        const localVarPath = `/engines/{engine_id}`.replace(`{${"engine_id"}}`, encodeURIComponent(String(engineId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      retrieveFile: (fileId, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("retrieveFile", "fileId", fileId);
        const localVarPath = `/files/{file_id}`.replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      retrieveFineTune: (fineTuneId, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("retrieveFineTune", "fineTuneId", fineTuneId);
        const localVarPath = `/fine-tunes/{fine_tune_id}`.replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      }),
      retrieveModel: (model, options2 = {}) => __awaiter2(this, void 0, void 0, function* () {
        common_1.assertParamExists("retrieveModel", "model", model);
        const localVarPath = `/models/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(model)));
        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration2) {
          baseOptions = configuration2.baseOptions;
        }
        const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options2);
        const localVarHeaderParameter = {};
        const localVarQueryParameter = {};
        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options2.headers);
        return {
          url: common_1.toPathString(localVarUrlObj),
          options: localVarRequestOptions
        };
      })
    };
  };
  exports2.OpenAIApiFp = function(configuration2) {
    const localVarAxiosParamCreator = exports2.OpenAIApiAxiosParamCreator(configuration2);
    return {
      cancelFineTune(fineTuneId, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelFineTune(fineTuneId, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createAnswer(createAnswerRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createAnswer(createAnswerRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createChatCompletion(createChatCompletionRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createChatCompletion(createChatCompletionRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createClassification(createClassificationRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createClassification(createClassificationRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createCompletion(createCompletionRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createCompletion(createCompletionRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createEdit(createEditRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createEdit(createEditRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createEmbedding(createEmbeddingRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createEmbedding(createEmbeddingRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createFile(file, purpose, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createFile(file, purpose, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createFineTune(createFineTuneRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createFineTune(createFineTuneRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createImage(createImageRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createImage(createImageRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createImageEdit(image, prompt, mask, n, size, responseFormat, user, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageEdit(image, prompt, mask, n, size, responseFormat, user, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createImageVariation(image, n, size, responseFormat, user, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageVariation(image, n, size, responseFormat, user, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createModeration(createModerationRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createModeration(createModerationRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createSearch(engineId, createSearchRequest, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createSearch(engineId, createSearchRequest, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createTranscription(file, model, prompt, responseFormat, temperature, language, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createTranscription(file, model, prompt, responseFormat, temperature, language, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      createTranslation(file, model, prompt, responseFormat, temperature, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.createTranslation(file, model, prompt, responseFormat, temperature, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      deleteFile(fileId, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFile(fileId, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      deleteModel(model, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(model, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      downloadFile(fileId, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.downloadFile(fileId, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      listEngines(options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.listEngines(options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      listFiles(options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.listFiles(options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      listFineTuneEvents(fineTuneId, stream, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTuneEvents(fineTuneId, stream, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      listFineTunes(options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTunes(options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      listModels(options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.listModels(options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      retrieveEngine(engineId, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveEngine(engineId, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      retrieveFile(fileId, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFile(fileId, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      retrieveFineTune(fineTuneId, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFineTune(fineTuneId, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      },
      retrieveModel(model, options2) {
        return __awaiter2(this, void 0, void 0, function* () {
          const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveModel(model, options2);
          return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_12.BASE_PATH, configuration2);
        });
      }
    };
  };
  exports2.OpenAIApiFactory = function(configuration2, basePath, axios2) {
    const localVarFp = exports2.OpenAIApiFp(configuration2);
    return {
      cancelFineTune(fineTuneId, options2) {
        return localVarFp.cancelFineTune(fineTuneId, options2).then((request2) => request2(axios2, basePath));
      },
      createAnswer(createAnswerRequest, options2) {
        return localVarFp.createAnswer(createAnswerRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createChatCompletion(createChatCompletionRequest, options2) {
        return localVarFp.createChatCompletion(createChatCompletionRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createClassification(createClassificationRequest, options2) {
        return localVarFp.createClassification(createClassificationRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createCompletion(createCompletionRequest, options2) {
        return localVarFp.createCompletion(createCompletionRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createEdit(createEditRequest, options2) {
        return localVarFp.createEdit(createEditRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createEmbedding(createEmbeddingRequest, options2) {
        return localVarFp.createEmbedding(createEmbeddingRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createFile(file, purpose, options2) {
        return localVarFp.createFile(file, purpose, options2).then((request2) => request2(axios2, basePath));
      },
      createFineTune(createFineTuneRequest, options2) {
        return localVarFp.createFineTune(createFineTuneRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createImage(createImageRequest, options2) {
        return localVarFp.createImage(createImageRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createImageEdit(image, prompt, mask, n, size, responseFormat, user, options2) {
        return localVarFp.createImageEdit(image, prompt, mask, n, size, responseFormat, user, options2).then((request2) => request2(axios2, basePath));
      },
      createImageVariation(image, n, size, responseFormat, user, options2) {
        return localVarFp.createImageVariation(image, n, size, responseFormat, user, options2).then((request2) => request2(axios2, basePath));
      },
      createModeration(createModerationRequest, options2) {
        return localVarFp.createModeration(createModerationRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createSearch(engineId, createSearchRequest, options2) {
        return localVarFp.createSearch(engineId, createSearchRequest, options2).then((request2) => request2(axios2, basePath));
      },
      createTranscription(file, model, prompt, responseFormat, temperature, language, options2) {
        return localVarFp.createTranscription(file, model, prompt, responseFormat, temperature, language, options2).then((request2) => request2(axios2, basePath));
      },
      createTranslation(file, model, prompt, responseFormat, temperature, options2) {
        return localVarFp.createTranslation(file, model, prompt, responseFormat, temperature, options2).then((request2) => request2(axios2, basePath));
      },
      deleteFile(fileId, options2) {
        return localVarFp.deleteFile(fileId, options2).then((request2) => request2(axios2, basePath));
      },
      deleteModel(model, options2) {
        return localVarFp.deleteModel(model, options2).then((request2) => request2(axios2, basePath));
      },
      downloadFile(fileId, options2) {
        return localVarFp.downloadFile(fileId, options2).then((request2) => request2(axios2, basePath));
      },
      listEngines(options2) {
        return localVarFp.listEngines(options2).then((request2) => request2(axios2, basePath));
      },
      listFiles(options2) {
        return localVarFp.listFiles(options2).then((request2) => request2(axios2, basePath));
      },
      listFineTuneEvents(fineTuneId, stream, options2) {
        return localVarFp.listFineTuneEvents(fineTuneId, stream, options2).then((request2) => request2(axios2, basePath));
      },
      listFineTunes(options2) {
        return localVarFp.listFineTunes(options2).then((request2) => request2(axios2, basePath));
      },
      listModels(options2) {
        return localVarFp.listModels(options2).then((request2) => request2(axios2, basePath));
      },
      retrieveEngine(engineId, options2) {
        return localVarFp.retrieveEngine(engineId, options2).then((request2) => request2(axios2, basePath));
      },
      retrieveFile(fileId, options2) {
        return localVarFp.retrieveFile(fileId, options2).then((request2) => request2(axios2, basePath));
      },
      retrieveFineTune(fineTuneId, options2) {
        return localVarFp.retrieveFineTune(fineTuneId, options2).then((request2) => request2(axios2, basePath));
      },
      retrieveModel(model, options2) {
        return localVarFp.retrieveModel(model, options2).then((request2) => request2(axios2, basePath));
      }
    };
  };
  class OpenAIApi extends base_12.BaseAPI {
    cancelFineTune(fineTuneId, options2) {
      return exports2.OpenAIApiFp(this.configuration).cancelFineTune(fineTuneId, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createAnswer(createAnswerRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createAnswer(createAnswerRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createChatCompletion(createChatCompletionRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createChatCompletion(createChatCompletionRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createClassification(createClassificationRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createClassification(createClassificationRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createCompletion(createCompletionRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createCompletion(createCompletionRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createEdit(createEditRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createEdit(createEditRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createEmbedding(createEmbeddingRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createEmbedding(createEmbeddingRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createFile(file, purpose, options2) {
      return exports2.OpenAIApiFp(this.configuration).createFile(file, purpose, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createFineTune(createFineTuneRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createFineTune(createFineTuneRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createImage(createImageRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createImage(createImageRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createImageEdit(image, prompt, mask, n, size, responseFormat, user, options2) {
      return exports2.OpenAIApiFp(this.configuration).createImageEdit(image, prompt, mask, n, size, responseFormat, user, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createImageVariation(image, n, size, responseFormat, user, options2) {
      return exports2.OpenAIApiFp(this.configuration).createImageVariation(image, n, size, responseFormat, user, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createModeration(createModerationRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createModeration(createModerationRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createSearch(engineId, createSearchRequest, options2) {
      return exports2.OpenAIApiFp(this.configuration).createSearch(engineId, createSearchRequest, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createTranscription(file, model, prompt, responseFormat, temperature, language, options2) {
      return exports2.OpenAIApiFp(this.configuration).createTranscription(file, model, prompt, responseFormat, temperature, language, options2).then((request2) => request2(this.axios, this.basePath));
    }
    createTranslation(file, model, prompt, responseFormat, temperature, options2) {
      return exports2.OpenAIApiFp(this.configuration).createTranslation(file, model, prompt, responseFormat, temperature, options2).then((request2) => request2(this.axios, this.basePath));
    }
    deleteFile(fileId, options2) {
      return exports2.OpenAIApiFp(this.configuration).deleteFile(fileId, options2).then((request2) => request2(this.axios, this.basePath));
    }
    deleteModel(model, options2) {
      return exports2.OpenAIApiFp(this.configuration).deleteModel(model, options2).then((request2) => request2(this.axios, this.basePath));
    }
    downloadFile(fileId, options2) {
      return exports2.OpenAIApiFp(this.configuration).downloadFile(fileId, options2).then((request2) => request2(this.axios, this.basePath));
    }
    listEngines(options2) {
      return exports2.OpenAIApiFp(this.configuration).listEngines(options2).then((request2) => request2(this.axios, this.basePath));
    }
    listFiles(options2) {
      return exports2.OpenAIApiFp(this.configuration).listFiles(options2).then((request2) => request2(this.axios, this.basePath));
    }
    listFineTuneEvents(fineTuneId, stream, options2) {
      return exports2.OpenAIApiFp(this.configuration).listFineTuneEvents(fineTuneId, stream, options2).then((request2) => request2(this.axios, this.basePath));
    }
    listFineTunes(options2) {
      return exports2.OpenAIApiFp(this.configuration).listFineTunes(options2).then((request2) => request2(this.axios, this.basePath));
    }
    listModels(options2) {
      return exports2.OpenAIApiFp(this.configuration).listModels(options2).then((request2) => request2(this.axios, this.basePath));
    }
    retrieveEngine(engineId, options2) {
      return exports2.OpenAIApiFp(this.configuration).retrieveEngine(engineId, options2).then((request2) => request2(this.axios, this.basePath));
    }
    retrieveFile(fileId, options2) {
      return exports2.OpenAIApiFp(this.configuration).retrieveFile(fileId, options2).then((request2) => request2(this.axios, this.basePath));
    }
    retrieveFineTune(fineTuneId, options2) {
      return exports2.OpenAIApiFp(this.configuration).retrieveFineTune(fineTuneId, options2).then((request2) => request2(this.axios, this.basePath));
    }
    retrieveModel(model, options2) {
      return exports2.OpenAIApiFp(this.configuration).retrieveModel(model, options2).then((request2) => request2(this.axios, this.basePath));
    }
  }
  exports2.OpenAIApi = OpenAIApi;
})(api);
var configuration = {};
const name = "openai";
const version = "3.2.1";
const description = "Node.js library for the OpenAI API";
const repository = {
  type: "git",
  url: "git@github.com:openai/openai-node.git"
};
const keywords = [
  "openai",
  "open",
  "ai",
  "gpt-3",
  "gpt3"
];
const author = "OpenAI";
const license = "MIT";
const main = "./dist/index.js";
const types = "./dist/index.d.ts";
const scripts = {
  build: "tsc --outDir dist/"
};
const dependencies = {
  axios: "^0.26.0",
  "form-data": "^4.0.0"
};
const devDependencies = {
  "@types/node": "^12.11.5",
  typescript: "^3.6.4"
};
const require$$0 = {
  name,
  version,
  description,
  repository,
  keywords,
  author,
  license,
  main,
  types,
  scripts,
  dependencies,
  devDependencies
};
var browser;
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser)
    return browser;
  hasRequiredBrowser = 1;
  browser = typeof self == "object" ? self.FormData : window.FormData;
  return browser;
}
Object.defineProperty(configuration, "__esModule", { value: true });
configuration.Configuration = void 0;
const packageJson = require$$0;
class Configuration {
  constructor(param = {}) {
    this.apiKey = param.apiKey;
    this.organization = param.organization;
    this.username = param.username;
    this.password = param.password;
    this.accessToken = param.accessToken;
    this.basePath = param.basePath;
    this.baseOptions = param.baseOptions;
    this.formDataCtor = param.formDataCtor;
    if (!this.baseOptions) {
      this.baseOptions = {};
    }
    this.baseOptions.headers = Object.assign({ "User-Agent": `OpenAI/NodeJS/${packageJson.version}`, "Authorization": `Bearer ${this.apiKey}` }, this.baseOptions.headers);
    if (this.organization) {
      this.baseOptions.headers["OpenAI-Organization"] = this.organization;
    }
    if (!this.formDataCtor) {
      this.formDataCtor = requireBrowser();
    }
  }
  isJsonMime(mime) {
    const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
  }
}
configuration.Configuration = Configuration;
(function(exports2) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
    for (var p in m)
      if (p !== "default" && !exports3.hasOwnProperty(p))
        __createBinding(exports3, m, p);
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  __exportStar(api, exports2);
  __exportStar(configuration, exports2);
})(dist$1);
const isBrowser = () => typeof window !== "undefined" && typeof window.document !== "undefined";
const isWebWorker = () => typeof globalThis === "object" && globalThis.constructor && globalThis.constructor.name === "DedicatedWorkerGlobalScope";
const isJsDom = () => typeof window !== "undefined" && window.name === "nodejs" || typeof navigator !== "undefined" && (navigator.userAgent.includes("Node.js") || navigator.userAgent.includes("jsdom"));
const isDeno = () => typeof Deno !== "undefined";
const isNode = () => typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined" && !isDeno();
const getEnv = () => {
  let env;
  if (isBrowser()) {
    env = "browser";
  } else if (isNode()) {
    env = "node";
  } else if (isWebWorker()) {
    env = "webworker";
  } else if (isJsDom()) {
    env = "jsdom";
  } else if (isDeno()) {
    env = "deno";
  } else {
    env = "other";
  }
  return env;
};
let runtimeEnvironment;
async function getRuntimeEnvironment() {
  if (runtimeEnvironment === void 0) {
    const env = getEnv();
    runtimeEnvironment = {
      library: "langchain-js",
      runtime: env
    };
  }
  return runtimeEnvironment;
}
function getEnvironmentVariable(name2) {
  var _a;
  try {
    return typeof process !== "undefined" ? (_a = process.env) == null ? void 0 : _a[name2] : void 0;
  } catch (e) {
    return void 0;
  }
}
const EventStreamContentType = "text/event-stream";
async function getBytes(stream, onChunk) {
  const reader = stream.getReader();
  while (true) {
    const result = await reader.read();
    if (result.done) {
      onChunk(new Uint8Array(), true);
      break;
    }
    onChunk(result.value);
  }
}
function getLines(onLine) {
  let buffer;
  let position;
  let fieldLength;
  let discardTrailingNewline = false;
  return function onChunk(arr, flush2) {
    if (flush2) {
      onLine(arr, 0, true);
      return;
    }
    if (buffer === void 0) {
      buffer = arr;
      position = 0;
      fieldLength = -1;
    } else {
      buffer = concat(buffer, arr);
    }
    const bufLength = buffer.length;
    let lineStart = 0;
    while (position < bufLength) {
      if (discardTrailingNewline) {
        if (buffer[position] === 10) {
          lineStart = ++position;
        }
        discardTrailingNewline = false;
      }
      let lineEnd = -1;
      for (; position < bufLength && lineEnd === -1; ++position) {
        switch (buffer[position]) {
          case 58:
            if (fieldLength === -1) {
              fieldLength = position - lineStart;
            }
            break;
          case 13:
            discardTrailingNewline = true;
          case 10:
            lineEnd = position;
            break;
        }
      }
      if (lineEnd === -1) {
        break;
      }
      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);
      lineStart = position;
      fieldLength = -1;
    }
    if (lineStart === bufLength) {
      buffer = void 0;
    } else if (lineStart !== 0) {
      buffer = buffer.subarray(lineStart);
      position -= lineStart;
    }
  };
}
function getMessages(onMessage, onId, onRetry) {
  let message = newMessage();
  const decoder = new TextDecoder();
  return function onLine(line, fieldLength, flush2) {
    if (flush2) {
      if (!isEmpty(message)) {
        onMessage == null ? void 0 : onMessage(message);
        message = newMessage();
      }
      return;
    }
    if (line.length === 0) {
      onMessage == null ? void 0 : onMessage(message);
      message = newMessage();
    } else if (fieldLength > 0) {
      const field = decoder.decode(line.subarray(0, fieldLength));
      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 ? 2 : 1);
      const value = decoder.decode(line.subarray(valueOffset));
      switch (field) {
        case "data":
          message.data = message.data ? message.data + "\n" + value : value;
          break;
        case "event":
          message.event = value;
          break;
        case "id":
          onId == null ? void 0 : onId(message.id = value);
          break;
        case "retry": {
          const retry2 = parseInt(value, 10);
          if (!Number.isNaN(retry2)) {
            onRetry == null ? void 0 : onRetry(message.retry = retry2);
          }
          break;
        }
      }
    }
  };
}
function concat(a, b) {
  const res = new Uint8Array(a.length + b.length);
  res.set(a);
  res.set(b, a.length);
  return res;
}
function newMessage() {
  return {
    data: "",
    event: "",
    id: "",
    retry: void 0
  };
}
function isEmpty(message) {
  return message.data === "" && message.event === "" && message.id === "" && message.retry === void 0;
}
function tryJsonStringify$1(data2) {
  try {
    return JSON.stringify(data2);
  } catch (e) {
    return data2;
  }
}
function settle(resolve, reject, response) {
  const { validateStatus: validateStatus2 } = response.config;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(createError(`Request failed with status code ${response.status} and body ${typeof response.data === "string" ? response.data : tryJsonStringify$1(response.data)}`, response.config, null, response.request, response));
  }
}
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL2(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    forEach2(params, function serialize(val, key) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (isArray(val)) {
        key = `${key}[]`;
      } else {
        val = [val];
      }
      forEach2(val, function parseValue(v) {
        if (isDate(v)) {
          v = v.toISOString();
        } else if (isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(`${encode(key)}=${encode(v)}`);
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
function isUndefined(val) {
  return typeof val === "undefined";
}
function isObject(val) {
  return val !== null && typeof val === "object";
}
function isDate(val) {
  return toString.call(val) === "[object Date]";
}
function isURLSearchParams(val) {
  return toString.call(val) === "[object URLSearchParams]";
}
function isArray(val) {
  return Array.isArray(val);
}
function forEach2(obj, fn) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
function isFormData(val) {
  return toString.call(val) === "[object FormData]";
}
function isStandardBrowserEnv() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
async function fetchAdapter(config2) {
  const request2 = createRequest(config2);
  const data2 = await getResponse(request2, config2);
  return new Promise((resolve, reject) => {
    if (data2 instanceof Error) {
      reject(data2);
    } else {
      Object.prototype.toString.call(config2.settle) === "[object Function]" ? config2.settle(resolve, reject, data2) : settle(resolve, reject, data2);
    }
  });
}
async function getResponse(request2, config2) {
  let stageOne;
  try {
    stageOne = await fetch(request2);
  } catch (e) {
    if (e && e.name === "AbortError") {
      return createError("Request aborted", config2, "ECONNABORTED", request2);
    }
    if (e && e.name === "TimeoutError") {
      return createError("Request timeout", config2, "ECONNABORTED", request2);
    }
    return createError("Network Error", config2, "ERR_NETWORK", request2);
  }
  const headers = {};
  stageOne.headers.forEach((value, key) => {
    headers[key] = value;
  });
  const response = {
    ok: stageOne.ok,
    status: stageOne.status,
    statusText: stageOne.statusText,
    headers,
    config: config2,
    request: request2
  };
  if (stageOne.status >= 200 && stageOne.status !== 204) {
    if (config2.responseType === "stream") {
      const contentType = stageOne.headers.get("content-type");
      if (!(contentType == null ? void 0 : contentType.startsWith(EventStreamContentType))) {
        if (stageOne.status >= 400) {
          if (contentType == null ? void 0 : contentType.startsWith("application/json")) {
            response.data = await stageOne.json();
            return response;
          } else {
            response.data = await stageOne.text();
            return response;
          }
        }
        throw new Error(`Expected content-type to be ${EventStreamContentType}, Actual: ${contentType}`);
      }
      await getBytes(stageOne.body, getLines(getMessages(config2.onmessage)));
    } else {
      switch (config2.responseType) {
        case "arraybuffer":
          response.data = await stageOne.arrayBuffer();
          break;
        case "blob":
          response.data = await stageOne.blob();
          break;
        case "json":
          response.data = await stageOne.json();
          break;
        case "formData":
          response.data = await stageOne.formData();
          break;
        default:
          response.data = await stageOne.text();
          break;
      }
    }
  }
  return response;
}
function createRequest(config2) {
  const headers = new Headers(config2.headers);
  if (config2.auth) {
    const username = config2.auth.username || "";
    const password = config2.auth.password ? decodeURI(encodeURIComponent(config2.auth.password)) : "";
    headers.set("Authorization", `Basic ${btoa(`${username}:${password}`)}`);
  }
  const method = config2.method.toUpperCase();
  const options2 = {
    headers,
    method
  };
  if (method !== "GET" && method !== "HEAD") {
    options2.body = config2.data;
    if (isFormData(options2.body) && isStandardBrowserEnv()) {
      headers.delete("Content-Type");
    }
  }
  if (typeof options2.body === "string") {
    options2.body = new TextEncoder().encode(options2.body);
  }
  if (config2.mode) {
    options2.mode = config2.mode;
  }
  if (config2.cache) {
    options2.cache = config2.cache;
  }
  if (config2.integrity) {
    options2.integrity = config2.integrity;
  }
  if (config2.redirect) {
    options2.redirect = config2.redirect;
  }
  if (config2.referrer) {
    options2.referrer = config2.referrer;
  }
  if (config2.timeout && config2.timeout > 0) {
    options2.signal = AbortSignal.timeout(config2.timeout);
  }
  if (config2.signal) {
    options2.signal = config2.signal;
  }
  if (!isUndefined(config2.withCredentials)) {
    options2.credentials = config2.withCredentials ? "include" : "omit";
  }
  if (config2.responseType === "stream") {
    options2.headers.set("Accept", EventStreamContentType);
  }
  const fullPath = buildFullPath(config2.baseURL, config2.url);
  const url = buildURL2(fullPath, config2.params, config2.paramsSerializer);
  return new Request(url, options2);
}
function createError(message, config2, code2, request2, response) {
  if (axios.AxiosError && typeof axios.AxiosError === "function") {
    return new axios.AxiosError(message, axios.AxiosError[code2], config2, request2, response);
  }
  const error = new Error(message);
  return enhanceError2(error, config2, code2, request2, response);
}
function enhanceError2(error, config2, code2, request2, response) {
  error.config = config2;
  if (code2) {
    error.code = code2;
  }
  error.request = request2;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
}
const chunkArray = (arr, chunkSize) => arr.reduce((chunks, elem, index) => {
  const chunkIndex = Math.floor(index / chunkSize);
  const chunk = chunks[chunkIndex] || [];
  chunks[chunkIndex] = chunk.concat([elem]);
  return chunks;
}, []);
function commonjsRequire(path2) {
  throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var object_hash = { exports: {} };
(function(module2, exports2) {
  !function(e) {
    module2.exports = e();
  }(function() {
    return function r(o, i, u) {
      function s(n, e2) {
        if (!i[n]) {
          if (!o[n]) {
            var t = "function" == typeof commonjsRequire && commonjsRequire;
            if (!e2 && t)
              return t(n, true);
            if (a)
              return a(n, true);
            throw new Error("Cannot find module '" + n + "'");
          }
          e2 = i[n] = { exports: {} };
          o[n][0].call(e2.exports, function(e3) {
            var t2 = o[n][1][e3];
            return s(t2 || e3);
          }, e2, e2.exports, r, o, i, u);
        }
        return i[n].exports;
      }
      for (var a = "function" == typeof commonjsRequire && commonjsRequire, e = 0; e < u.length; e++)
        s(u[e]);
      return s;
    }({ 1: [function(w, b, m) {
      !function(e, n, s, c, d, h, p, g, y) {
        var r = w("crypto");
        function t(e2, t2) {
          t2 = u(e2, t2);
          var n2;
          return void 0 === (n2 = "passthrough" !== t2.algorithm ? r.createHash(t2.algorithm) : new l()).write && (n2.write = n2.update, n2.end = n2.update), f(t2, n2).dispatch(e2), n2.update || n2.end(""), n2.digest ? n2.digest("buffer" === t2.encoding ? void 0 : t2.encoding) : (e2 = n2.read(), "buffer" !== t2.encoding ? e2.toString(t2.encoding) : e2);
        }
        (m = b.exports = t).sha1 = function(e2) {
          return t(e2);
        }, m.keys = function(e2) {
          return t(e2, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
        }, m.MD5 = function(e2) {
          return t(e2, { algorithm: "md5", encoding: "hex" });
        }, m.keysMD5 = function(e2) {
          return t(e2, { algorithm: "md5", encoding: "hex", excludeValues: true });
        };
        var o = r.getHashes ? r.getHashes().slice() : ["sha1", "md5"], i = (o.push("passthrough"), ["buffer", "hex", "binary", "base64"]);
        function u(e2, t2) {
          var n2 = {};
          if (n2.algorithm = (t2 = t2 || {}).algorithm || "sha1", n2.encoding = t2.encoding || "hex", n2.excludeValues = !!t2.excludeValues, n2.algorithm = n2.algorithm.toLowerCase(), n2.encoding = n2.encoding.toLowerCase(), n2.ignoreUnknown = true === t2.ignoreUnknown, n2.respectType = false !== t2.respectType, n2.respectFunctionNames = false !== t2.respectFunctionNames, n2.respectFunctionProperties = false !== t2.respectFunctionProperties, n2.unorderedArrays = true === t2.unorderedArrays, n2.unorderedSets = false !== t2.unorderedSets, n2.unorderedObjects = false !== t2.unorderedObjects, n2.replacer = t2.replacer || void 0, n2.excludeKeys = t2.excludeKeys || void 0, void 0 === e2)
            throw new Error("Object argument required.");
          for (var r2 = 0; r2 < o.length; ++r2)
            o[r2].toLowerCase() === n2.algorithm.toLowerCase() && (n2.algorithm = o[r2]);
          if (-1 === o.indexOf(n2.algorithm))
            throw new Error('Algorithm "' + n2.algorithm + '"  not supported. supported values: ' + o.join(", "));
          if (-1 === i.indexOf(n2.encoding) && "passthrough" !== n2.algorithm)
            throw new Error('Encoding "' + n2.encoding + '"  not supported. supported values: ' + i.join(", "));
          return n2;
        }
        function a(e2) {
          if ("function" == typeof e2)
            return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(e2));
        }
        function f(o2, t2, i2) {
          i2 = i2 || [];
          function u2(e2) {
            return t2.update ? t2.update(e2, "utf8") : t2.write(e2, "utf8");
          }
          return { dispatch: function(e2) {
            return this["_" + (null === (e2 = o2.replacer ? o2.replacer(e2) : e2) ? "null" : typeof e2)](e2);
          }, _object: function(t3) {
            var n2, e2 = Object.prototype.toString.call(t3), r2 = /\[object (.*)\]/i.exec(e2);
            r2 = (r2 = r2 ? r2[1] : "unknown:[" + e2 + "]").toLowerCase();
            if (0 <= (e2 = i2.indexOf(t3)))
              return this.dispatch("[CIRCULAR:" + e2 + "]");
            if (i2.push(t3), void 0 !== s && s.isBuffer && s.isBuffer(t3))
              return u2("buffer:"), u2(t3);
            if ("object" === r2 || "function" === r2 || "asyncfunction" === r2)
              return e2 = Object.keys(t3), o2.unorderedObjects && (e2 = e2.sort()), false === o2.respectType || a(t3) || e2.splice(0, 0, "prototype", "__proto__", "constructor"), o2.excludeKeys && (e2 = e2.filter(function(e3) {
                return !o2.excludeKeys(e3);
              })), u2("object:" + e2.length + ":"), n2 = this, e2.forEach(function(e3) {
                n2.dispatch(e3), u2(":"), o2.excludeValues || n2.dispatch(t3[e3]), u2(",");
              });
            if (!this["_" + r2]) {
              if (o2.ignoreUnknown)
                return u2("[" + r2 + "]");
              throw new Error('Unknown object type "' + r2 + '"');
            }
            this["_" + r2](t3);
          }, _array: function(e2, t3) {
            t3 = void 0 !== t3 ? t3 : false !== o2.unorderedArrays;
            var n2 = this;
            if (u2("array:" + e2.length + ":"), !t3 || e2.length <= 1)
              return e2.forEach(function(e3) {
                return n2.dispatch(e3);
              });
            var r2 = [], t3 = e2.map(function(e3) {
              var t4 = new l(), n3 = i2.slice();
              return f(o2, t4, n3).dispatch(e3), r2 = r2.concat(n3.slice(i2.length)), t4.read().toString();
            });
            return i2 = i2.concat(r2), t3.sort(), this._array(t3, false);
          }, _date: function(e2) {
            return u2("date:" + e2.toJSON());
          }, _symbol: function(e2) {
            return u2("symbol:" + e2.toString());
          }, _error: function(e2) {
            return u2("error:" + e2.toString());
          }, _boolean: function(e2) {
            return u2("bool:" + e2.toString());
          }, _string: function(e2) {
            u2("string:" + e2.length + ":"), u2(e2.toString());
          }, _function: function(e2) {
            u2("fn:"), a(e2) ? this.dispatch("[native]") : this.dispatch(e2.toString()), false !== o2.respectFunctionNames && this.dispatch("function-name:" + String(e2.name)), o2.respectFunctionProperties && this._object(e2);
          }, _number: function(e2) {
            return u2("number:" + e2.toString());
          }, _xml: function(e2) {
            return u2("xml:" + e2.toString());
          }, _null: function() {
            return u2("Null");
          }, _undefined: function() {
            return u2("Undefined");
          }, _regexp: function(e2) {
            return u2("regex:" + e2.toString());
          }, _uint8array: function(e2) {
            return u2("uint8array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _uint8clampedarray: function(e2) {
            return u2("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _int8array: function(e2) {
            return u2("int8array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _uint16array: function(e2) {
            return u2("uint16array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _int16array: function(e2) {
            return u2("int16array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _uint32array: function(e2) {
            return u2("uint32array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _int32array: function(e2) {
            return u2("int32array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _float32array: function(e2) {
            return u2("float32array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _float64array: function(e2) {
            return u2("float64array:"), this.dispatch(Array.prototype.slice.call(e2));
          }, _arraybuffer: function(e2) {
            return u2("arraybuffer:"), this.dispatch(new Uint8Array(e2));
          }, _url: function(e2) {
            return u2("url:" + e2.toString());
          }, _map: function(e2) {
            u2("map:");
            e2 = Array.from(e2);
            return this._array(e2, false !== o2.unorderedSets);
          }, _set: function(e2) {
            u2("set:");
            e2 = Array.from(e2);
            return this._array(e2, false !== o2.unorderedSets);
          }, _file: function(e2) {
            return u2("file:"), this.dispatch([e2.name, e2.size, e2.type, e2.lastModfied]);
          }, _blob: function() {
            if (o2.ignoreUnknown)
              return u2("[blob]");
            throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
          }, _domwindow: function() {
            return u2("domwindow");
          }, _bigint: function(e2) {
            return u2("bigint:" + e2.toString());
          }, _process: function() {
            return u2("process");
          }, _timer: function() {
            return u2("timer");
          }, _pipe: function() {
            return u2("pipe");
          }, _tcp: function() {
            return u2("tcp");
          }, _udp: function() {
            return u2("udp");
          }, _tty: function() {
            return u2("tty");
          }, _statwatcher: function() {
            return u2("statwatcher");
          }, _securecontext: function() {
            return u2("securecontext");
          }, _connection: function() {
            return u2("connection");
          }, _zlib: function() {
            return u2("zlib");
          }, _context: function() {
            return u2("context");
          }, _nodescript: function() {
            return u2("nodescript");
          }, _httpparser: function() {
            return u2("httpparser");
          }, _dataview: function() {
            return u2("dataview");
          }, _signal: function() {
            return u2("signal");
          }, _fsevent: function() {
            return u2("fsevent");
          }, _tlswrap: function() {
            return u2("tlswrap");
          } };
        }
        function l() {
          return { buf: "", write: function(e2) {
            this.buf += e2;
          }, end: function(e2) {
            this.buf += e2;
          }, read: function() {
            return this.buf;
          } };
        }
        m.writeToStream = function(e2, t2, n2) {
          return void 0 === n2 && (n2 = t2, t2 = {}), f(t2 = u(e2, t2), n2).dispatch(e2);
        };
      }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_9a5aa49d.js", "/");
    }, { buffer: 3, crypto: 5, lYpoI2: 11 }], 2: [function(e, t, f) {
      !function(e2, t2, n, r, o, i, u, s, a) {
        !function(e3) {
          var a2 = "undefined" != typeof Uint8Array ? Uint8Array : Array, t3 = "+".charCodeAt(0), n2 = "/".charCodeAt(0), r2 = "0".charCodeAt(0), o2 = "a".charCodeAt(0), i2 = "A".charCodeAt(0), u2 = "-".charCodeAt(0), s2 = "_".charCodeAt(0);
          function f2(e4) {
            e4 = e4.charCodeAt(0);
            return e4 === t3 || e4 === u2 ? 62 : e4 === n2 || e4 === s2 ? 63 : e4 < r2 ? -1 : e4 < r2 + 10 ? e4 - r2 + 26 + 26 : e4 < i2 + 26 ? e4 - i2 : e4 < o2 + 26 ? e4 - o2 + 26 : void 0;
          }
          e3.toByteArray = function(e4) {
            var t4, n3;
            if (0 < e4.length % 4)
              throw new Error("Invalid string. Length must be a multiple of 4");
            var r3 = e4.length, r3 = "=" === e4.charAt(r3 - 2) ? 2 : "=" === e4.charAt(r3 - 1) ? 1 : 0, o3 = new a2(3 * e4.length / 4 - r3), i3 = 0 < r3 ? e4.length - 4 : e4.length, u3 = 0;
            function s3(e5) {
              o3[u3++] = e5;
            }
            for (t4 = 0; t4 < i3; t4 += 4, 0)
              s3((16711680 & (n3 = f2(e4.charAt(t4)) << 18 | f2(e4.charAt(t4 + 1)) << 12 | f2(e4.charAt(t4 + 2)) << 6 | f2(e4.charAt(t4 + 3)))) >> 16), s3((65280 & n3) >> 8), s3(255 & n3);
            return 2 == r3 ? s3(255 & (n3 = f2(e4.charAt(t4)) << 2 | f2(e4.charAt(t4 + 1)) >> 4)) : 1 == r3 && (s3((n3 = f2(e4.charAt(t4)) << 10 | f2(e4.charAt(t4 + 1)) << 4 | f2(e4.charAt(t4 + 2)) >> 2) >> 8 & 255), s3(255 & n3)), o3;
          }, e3.fromByteArray = function(e4) {
            var t4, n3, r3, o3, i3 = e4.length % 3, u3 = "";
            function s3(e5) {
              return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e5);
            }
            for (t4 = 0, r3 = e4.length - i3; t4 < r3; t4 += 3)
              n3 = (e4[t4] << 16) + (e4[t4 + 1] << 8) + e4[t4 + 2], u3 += s3((o3 = n3) >> 18 & 63) + s3(o3 >> 12 & 63) + s3(o3 >> 6 & 63) + s3(63 & o3);
            switch (i3) {
              case 1:
                u3 = (u3 += s3((n3 = e4[e4.length - 1]) >> 2)) + s3(n3 << 4 & 63) + "==";
                break;
              case 2:
                u3 = (u3 = (u3 += s3((n3 = (e4[e4.length - 2] << 8) + e4[e4.length - 1]) >> 10)) + s3(n3 >> 4 & 63)) + s3(n3 << 2 & 63) + "=";
            }
            return u3;
          };
        }(void 0 === f ? this.base64js = {} : f);
      }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
    }, { buffer: 3, lYpoI2: 11 }], 3: [function(O, e, H) {
      !function(e2, n, f, r, h, p, g, y, w) {
        var a = O("base64-js"), i = O("ieee754");
        function f(e3, t2, n2) {
          if (!(this instanceof f))
            return new f(e3, t2, n2);
          var r2, o2, i2, u2, s2 = typeof e3;
          if ("base64" === t2 && "string" == s2)
            for (e3 = (u2 = e3).trim ? u2.trim() : u2.replace(/^\s+|\s+$/g, ""); e3.length % 4 != 0; )
              e3 += "=";
          if ("number" == s2)
            r2 = j(e3);
          else if ("string" == s2)
            r2 = f.byteLength(e3, t2);
          else {
            if ("object" != s2)
              throw new Error("First argument needs to be a number, array or string.");
            r2 = j(e3.length);
          }
          if (f._useTypedArrays ? o2 = f._augment(new Uint8Array(r2)) : ((o2 = this).length = r2, o2._isBuffer = true), f._useTypedArrays && "number" == typeof e3.byteLength)
            o2._set(e3);
          else if (C(u2 = e3) || f.isBuffer(u2) || u2 && "object" == typeof u2 && "number" == typeof u2.length)
            for (i2 = 0; i2 < r2; i2++)
              f.isBuffer(e3) ? o2[i2] = e3.readUInt8(i2) : o2[i2] = e3[i2];
          else if ("string" == s2)
            o2.write(e3, 0, t2);
          else if ("number" == s2 && !f._useTypedArrays && !n2)
            for (i2 = 0; i2 < r2; i2++)
              o2[i2] = 0;
          return o2;
        }
        function b(e3, t2, n2, r2) {
          return f._charsWritten = c(function(e4) {
            for (var t3 = [], n3 = 0; n3 < e4.length; n3++)
              t3.push(255 & e4.charCodeAt(n3));
            return t3;
          }(t2), e3, n2, r2);
        }
        function m(e3, t2, n2, r2) {
          return f._charsWritten = c(function(e4) {
            for (var t3, n3, r3 = [], o2 = 0; o2 < e4.length; o2++)
              n3 = e4.charCodeAt(o2), t3 = n3 >> 8, n3 = n3 % 256, r3.push(n3), r3.push(t3);
            return r3;
          }(t2), e3, n2, r2);
        }
        function v(e3, t2, n2) {
          var r2 = "";
          n2 = Math.min(e3.length, n2);
          for (var o2 = t2; o2 < n2; o2++)
            r2 += String.fromCharCode(e3[o2]);
          return r2;
        }
        function o(e3, t2, n2, r2) {
          r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length"));
          var o2, r2 = e3.length;
          if (!(r2 <= t2))
            return n2 ? (o2 = e3[t2], t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8)) : (o2 = e3[t2] << 8, t2 + 1 < r2 && (o2 |= e3[t2 + 1])), o2;
        }
        function u(e3, t2, n2, r2) {
          r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length"));
          var o2, r2 = e3.length;
          if (!(r2 <= t2))
            return n2 ? (t2 + 2 < r2 && (o2 = e3[t2 + 2] << 16), t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8), o2 |= e3[t2], t2 + 3 < r2 && (o2 += e3[t2 + 3] << 24 >>> 0)) : (t2 + 1 < r2 && (o2 = e3[t2 + 1] << 16), t2 + 2 < r2 && (o2 |= e3[t2 + 2] << 8), t2 + 3 < r2 && (o2 |= e3[t2 + 3]), o2 += e3[t2] << 24 >>> 0), o2;
        }
        function _(e3, t2, n2, r2) {
          if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
            return r2 = o(e3, t2, n2, true), 32768 & r2 ? -1 * (65535 - r2 + 1) : r2;
        }
        function E(e3, t2, n2, r2) {
          if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
            return r2 = u(e3, t2, n2, true), 2147483648 & r2 ? -1 * (4294967295 - r2 + 1) : r2;
        }
        function I(e3, t2, n2, r2) {
          return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 23, 4);
        }
        function A(e3, t2, n2, r2) {
          return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 7 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 52, 8);
        }
        function s(e3, t2, n2, r2, o2) {
          o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "trying to write beyond buffer length"), Y(t2, 65535));
          o2 = e3.length;
          if (!(o2 <= n2))
            for (var i2 = 0, u2 = Math.min(o2 - n2, 2); i2 < u2; i2++)
              e3[n2 + i2] = (t2 & 255 << 8 * (r2 ? i2 : 1 - i2)) >>> 8 * (r2 ? i2 : 1 - i2);
        }
        function l(e3, t2, n2, r2, o2) {
          o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "trying to write beyond buffer length"), Y(t2, 4294967295));
          o2 = e3.length;
          if (!(o2 <= n2))
            for (var i2 = 0, u2 = Math.min(o2 - n2, 4); i2 < u2; i2++)
              e3[n2 + i2] = t2 >>> 8 * (r2 ? i2 : 3 - i2) & 255;
        }
        function B(e3, t2, n2, r2, o2) {
          o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "Trying to write beyond buffer length"), F(t2, 32767, -32768)), e3.length <= n2 || s(e3, 0 <= t2 ? t2 : 65535 + t2 + 1, n2, r2, o2);
        }
        function L(e3, t2, n2, r2, o2) {
          o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), F(t2, 2147483647, -2147483648)), e3.length <= n2 || l(e3, 0 <= t2 ? t2 : 4294967295 + t2 + 1, n2, r2, o2);
        }
        function U(e3, t2, n2, r2, o2) {
          o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), D(t2, 34028234663852886e22, -34028234663852886e22)), e3.length <= n2 || i.write(e3, t2, n2, r2, 23, 4);
        }
        function x(e3, t2, n2, r2, o2) {
          o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 7 < e3.length, "Trying to write beyond buffer length"), D(t2, 17976931348623157e292, -17976931348623157e292)), e3.length <= n2 || i.write(e3, t2, n2, r2, 52, 8);
        }
        H.Buffer = f, H.SlowBuffer = f, H.INSPECT_MAX_BYTES = 50, f.poolSize = 8192, f._useTypedArrays = function() {
          try {
            var e3 = new ArrayBuffer(0), t2 = new Uint8Array(e3);
            return t2.foo = function() {
              return 42;
            }, 42 === t2.foo() && "function" == typeof t2.subarray;
          } catch (e4) {
            return false;
          }
        }(), f.isEncoding = function(e3) {
          switch (String(e3).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "raw":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return true;
            default:
              return false;
          }
        }, f.isBuffer = function(e3) {
          return !(null == e3 || !e3._isBuffer);
        }, f.byteLength = function(e3, t2) {
          var n2;
          switch (e3 += "", t2 || "utf8") {
            case "hex":
              n2 = e3.length / 2;
              break;
            case "utf8":
            case "utf-8":
              n2 = T(e3).length;
              break;
            case "ascii":
            case "binary":
            case "raw":
              n2 = e3.length;
              break;
            case "base64":
              n2 = M(e3).length;
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              n2 = 2 * e3.length;
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return n2;
        }, f.concat = function(e3, t2) {
          if (d(C(e3), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."), 0 === e3.length)
            return new f(0);
          if (1 === e3.length)
            return e3[0];
          if ("number" != typeof t2)
            for (o2 = t2 = 0; o2 < e3.length; o2++)
              t2 += e3[o2].length;
          for (var n2 = new f(t2), r2 = 0, o2 = 0; o2 < e3.length; o2++) {
            var i2 = e3[o2];
            i2.copy(n2, r2), r2 += i2.length;
          }
          return n2;
        }, f.prototype.write = function(e3, t2, n2, r2) {
          isFinite(t2) ? isFinite(n2) || (r2 = n2, n2 = void 0) : (a2 = r2, r2 = t2, t2 = n2, n2 = a2), t2 = Number(t2) || 0;
          var o2, i2, u2, s2, a2 = this.length - t2;
          switch ((!n2 || a2 < (n2 = Number(n2))) && (n2 = a2), r2 = String(r2 || "utf8").toLowerCase()) {
            case "hex":
              o2 = function(e4, t3, n3, r3) {
                n3 = Number(n3) || 0;
                var o3 = e4.length - n3;
                (!r3 || o3 < (r3 = Number(r3))) && (r3 = o3), d((o3 = t3.length) % 2 == 0, "Invalid hex string"), o3 / 2 < r3 && (r3 = o3 / 2);
                for (var i3 = 0; i3 < r3; i3++) {
                  var u3 = parseInt(t3.substr(2 * i3, 2), 16);
                  d(!isNaN(u3), "Invalid hex string"), e4[n3 + i3] = u3;
                }
                return f._charsWritten = 2 * i3, i3;
              }(this, e3, t2, n2);
              break;
            case "utf8":
            case "utf-8":
              i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(T(e3), i2, u2, s2);
              break;
            case "ascii":
            case "binary":
              o2 = b(this, e3, t2, n2);
              break;
            case "base64":
              i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(M(e3), i2, u2, s2);
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              o2 = m(this, e3, t2, n2);
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return o2;
        }, f.prototype.toString = function(e3, t2, n2) {
          var r2, o2, i2, u2, s2 = this;
          if (e3 = String(e3 || "utf8").toLowerCase(), t2 = Number(t2) || 0, (n2 = void 0 !== n2 ? Number(n2) : s2.length) === t2)
            return "";
          switch (e3) {
            case "hex":
              r2 = function(e4, t3, n3) {
                var r3 = e4.length;
                (!t3 || t3 < 0) && (t3 = 0);
                (!n3 || n3 < 0 || r3 < n3) && (n3 = r3);
                for (var o3 = "", i3 = t3; i3 < n3; i3++)
                  o3 += k(e4[i3]);
                return o3;
              }(s2, t2, n2);
              break;
            case "utf8":
            case "utf-8":
              r2 = function(e4, t3, n3) {
                var r3 = "", o3 = "";
                n3 = Math.min(e4.length, n3);
                for (var i3 = t3; i3 < n3; i3++)
                  e4[i3] <= 127 ? (r3 += N(o3) + String.fromCharCode(e4[i3]), o3 = "") : o3 += "%" + e4[i3].toString(16);
                return r3 + N(o3);
              }(s2, t2, n2);
              break;
            case "ascii":
            case "binary":
              r2 = v(s2, t2, n2);
              break;
            case "base64":
              o2 = s2, u2 = n2, r2 = 0 === (i2 = t2) && u2 === o2.length ? a.fromByteArray(o2) : a.fromByteArray(o2.slice(i2, u2));
              break;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              r2 = function(e4, t3, n3) {
                for (var r3 = e4.slice(t3, n3), o3 = "", i3 = 0; i3 < r3.length; i3 += 2)
                  o3 += String.fromCharCode(r3[i3] + 256 * r3[i3 + 1]);
                return o3;
              }(s2, t2, n2);
              break;
            default:
              throw new Error("Unknown encoding");
          }
          return r2;
        }, f.prototype.toJSON = function() {
          return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
        }, f.prototype.copy = function(e3, t2, n2, r2) {
          if (t2 = t2 || 0, (r2 = r2 || 0 === r2 ? r2 : this.length) !== (n2 = n2 || 0) && 0 !== e3.length && 0 !== this.length) {
            d(n2 <= r2, "sourceEnd < sourceStart"), d(0 <= t2 && t2 < e3.length, "targetStart out of bounds"), d(0 <= n2 && n2 < this.length, "sourceStart out of bounds"), d(0 <= r2 && r2 <= this.length, "sourceEnd out of bounds"), r2 > this.length && (r2 = this.length);
            var o2 = (r2 = e3.length - t2 < r2 - n2 ? e3.length - t2 + n2 : r2) - n2;
            if (o2 < 100 || !f._useTypedArrays)
              for (var i2 = 0; i2 < o2; i2++)
                e3[i2 + t2] = this[i2 + n2];
            else
              e3._set(this.subarray(n2, n2 + o2), t2);
          }
        }, f.prototype.slice = function(e3, t2) {
          var n2 = this.length;
          if (e3 = S(e3, n2, 0), t2 = S(t2, n2, n2), f._useTypedArrays)
            return f._augment(this.subarray(e3, t2));
          for (var r2 = t2 - e3, o2 = new f(r2, void 0, true), i2 = 0; i2 < r2; i2++)
            o2[i2] = this[i2 + e3];
          return o2;
        }, f.prototype.get = function(e3) {
          return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(e3);
        }, f.prototype.set = function(e3, t2) {
          return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(e3, t2);
        }, f.prototype.readUInt8 = function(e3, t2) {
          if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
            return this[e3];
        }, f.prototype.readUInt16LE = function(e3, t2) {
          return o(this, e3, true, t2);
        }, f.prototype.readUInt16BE = function(e3, t2) {
          return o(this, e3, false, t2);
        }, f.prototype.readUInt32LE = function(e3, t2) {
          return u(this, e3, true, t2);
        }, f.prototype.readUInt32BE = function(e3, t2) {
          return u(this, e3, false, t2);
        }, f.prototype.readInt8 = function(e3, t2) {
          if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
            return 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
        }, f.prototype.readInt16LE = function(e3, t2) {
          return _(this, e3, true, t2);
        }, f.prototype.readInt16BE = function(e3, t2) {
          return _(this, e3, false, t2);
        }, f.prototype.readInt32LE = function(e3, t2) {
          return E(this, e3, true, t2);
        }, f.prototype.readInt32BE = function(e3, t2) {
          return E(this, e3, false, t2);
        }, f.prototype.readFloatLE = function(e3, t2) {
          return I(this, e3, true, t2);
        }, f.prototype.readFloatBE = function(e3, t2) {
          return I(this, e3, false, t2);
        }, f.prototype.readDoubleLE = function(e3, t2) {
          return A(this, e3, true, t2);
        }, f.prototype.readDoubleBE = function(e3, t2) {
          return A(this, e3, false, t2);
        }, f.prototype.writeUInt8 = function(e3, t2, n2) {
          n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "trying to write beyond buffer length"), Y(e3, 255)), t2 >= this.length || (this[t2] = e3);
        }, f.prototype.writeUInt16LE = function(e3, t2, n2) {
          s(this, e3, t2, true, n2);
        }, f.prototype.writeUInt16BE = function(e3, t2, n2) {
          s(this, e3, t2, false, n2);
        }, f.prototype.writeUInt32LE = function(e3, t2, n2) {
          l(this, e3, t2, true, n2);
        }, f.prototype.writeUInt32BE = function(e3, t2, n2) {
          l(this, e3, t2, false, n2);
        }, f.prototype.writeInt8 = function(e3, t2, n2) {
          n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "Trying to write beyond buffer length"), F(e3, 127, -128)), t2 >= this.length || (0 <= e3 ? this.writeUInt8(e3, t2, n2) : this.writeUInt8(255 + e3 + 1, t2, n2));
        }, f.prototype.writeInt16LE = function(e3, t2, n2) {
          B(this, e3, t2, true, n2);
        }, f.prototype.writeInt16BE = function(e3, t2, n2) {
          B(this, e3, t2, false, n2);
        }, f.prototype.writeInt32LE = function(e3, t2, n2) {
          L(this, e3, t2, true, n2);
        }, f.prototype.writeInt32BE = function(e3, t2, n2) {
          L(this, e3, t2, false, n2);
        }, f.prototype.writeFloatLE = function(e3, t2, n2) {
          U(this, e3, t2, true, n2);
        }, f.prototype.writeFloatBE = function(e3, t2, n2) {
          U(this, e3, t2, false, n2);
        }, f.prototype.writeDoubleLE = function(e3, t2, n2) {
          x(this, e3, t2, true, n2);
        }, f.prototype.writeDoubleBE = function(e3, t2, n2) {
          x(this, e3, t2, false, n2);
        }, f.prototype.fill = function(e3, t2, n2) {
          if (t2 = t2 || 0, n2 = n2 || this.length, d("number" == typeof (e3 = "string" == typeof (e3 = e3 || 0) ? e3.charCodeAt(0) : e3) && !isNaN(e3), "value is not a number"), d(t2 <= n2, "end < start"), n2 !== t2 && 0 !== this.length) {
            d(0 <= t2 && t2 < this.length, "start out of bounds"), d(0 <= n2 && n2 <= this.length, "end out of bounds");
            for (var r2 = t2; r2 < n2; r2++)
              this[r2] = e3;
          }
        }, f.prototype.inspect = function() {
          for (var e3 = [], t2 = this.length, n2 = 0; n2 < t2; n2++)
            if (e3[n2] = k(this[n2]), n2 === H.INSPECT_MAX_BYTES) {
              e3[n2 + 1] = "...";
              break;
            }
          return "<Buffer " + e3.join(" ") + ">";
        }, f.prototype.toArrayBuffer = function() {
          if ("undefined" == typeof Uint8Array)
            throw new Error("Buffer.toArrayBuffer not supported in this browser");
          if (f._useTypedArrays)
            return new f(this).buffer;
          for (var e3 = new Uint8Array(this.length), t2 = 0, n2 = e3.length; t2 < n2; t2 += 1)
            e3[t2] = this[t2];
          return e3.buffer;
        };
        var t = f.prototype;
        function S(e3, t2, n2) {
          return "number" != typeof e3 ? n2 : t2 <= (e3 = ~~e3) ? t2 : 0 <= e3 || 0 <= (e3 += t2) ? e3 : 0;
        }
        function j(e3) {
          return (e3 = ~~Math.ceil(+e3)) < 0 ? 0 : e3;
        }
        function C(e3) {
          return (Array.isArray || function(e4) {
            return "[object Array]" === Object.prototype.toString.call(e4);
          })(e3);
        }
        function k(e3) {
          return e3 < 16 ? "0" + e3.toString(16) : e3.toString(16);
        }
        function T(e3) {
          for (var t2 = [], n2 = 0; n2 < e3.length; n2++) {
            var r2 = e3.charCodeAt(n2);
            if (r2 <= 127)
              t2.push(e3.charCodeAt(n2));
            else
              for (var o2 = n2, i2 = (55296 <= r2 && r2 <= 57343 && n2++, encodeURIComponent(e3.slice(o2, n2 + 1)).substr(1).split("%")), u2 = 0; u2 < i2.length; u2++)
                t2.push(parseInt(i2[u2], 16));
          }
          return t2;
        }
        function M(e3) {
          return a.toByteArray(e3);
        }
        function c(e3, t2, n2, r2) {
          for (var o2 = 0; o2 < r2 && !(o2 + n2 >= t2.length || o2 >= e3.length); o2++)
            t2[o2 + n2] = e3[o2];
          return o2;
        }
        function N(e3) {
          try {
            return decodeURIComponent(e3);
          } catch (e4) {
            return String.fromCharCode(65533);
          }
        }
        function Y(e3, t2) {
          d("number" == typeof e3, "cannot write a non-number as a number"), d(0 <= e3, "specified a negative value for writing an unsigned value"), d(e3 <= t2, "value is larger than maximum value for type"), d(Math.floor(e3) === e3, "value has a fractional component");
        }
        function F(e3, t2, n2) {
          d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value"), d(Math.floor(e3) === e3, "value has a fractional component");
        }
        function D(e3, t2, n2) {
          d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value");
        }
        function d(e3, t2) {
          if (!e3)
            throw new Error(t2 || "Failed assertion");
        }
        f._augment = function(e3) {
          return e3._isBuffer = true, e3._get = e3.get, e3._set = e3.set, e3.get = t.get, e3.set = t.set, e3.write = t.write, e3.toString = t.toString, e3.toLocaleString = t.toString, e3.toJSON = t.toJSON, e3.copy = t.copy, e3.slice = t.slice, e3.readUInt8 = t.readUInt8, e3.readUInt16LE = t.readUInt16LE, e3.readUInt16BE = t.readUInt16BE, e3.readUInt32LE = t.readUInt32LE, e3.readUInt32BE = t.readUInt32BE, e3.readInt8 = t.readInt8, e3.readInt16LE = t.readInt16LE, e3.readInt16BE = t.readInt16BE, e3.readInt32LE = t.readInt32LE, e3.readInt32BE = t.readInt32BE, e3.readFloatLE = t.readFloatLE, e3.readFloatBE = t.readFloatBE, e3.readDoubleLE = t.readDoubleLE, e3.readDoubleBE = t.readDoubleBE, e3.writeUInt8 = t.writeUInt8, e3.writeUInt16LE = t.writeUInt16LE, e3.writeUInt16BE = t.writeUInt16BE, e3.writeUInt32LE = t.writeUInt32LE, e3.writeUInt32BE = t.writeUInt32BE, e3.writeInt8 = t.writeInt8, e3.writeInt16LE = t.writeInt16LE, e3.writeInt16BE = t.writeInt16BE, e3.writeInt32LE = t.writeInt32LE, e3.writeInt32BE = t.writeInt32BE, e3.writeFloatLE = t.writeFloatLE, e3.writeFloatBE = t.writeFloatBE, e3.writeDoubleLE = t.writeDoubleLE, e3.writeDoubleBE = t.writeDoubleBE, e3.fill = t.fill, e3.inspect = t.inspect, e3.toArrayBuffer = t.toArrayBuffer, e3;
        };
      }.call(this, O("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, O("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
    }, { "base64-js": 2, buffer: 3, ieee754: 10, lYpoI2: 11 }], 4: [function(c, d, e) {
      !function(e2, t, a, n, r, o, i, u, s) {
        var a = c("buffer").Buffer, f = 4, l = new a(f);
        l.fill(0);
        d.exports = { hash: function(e3, t2, n2, r2) {
          for (var o2 = t2(function(e4, t3) {
            e4.length % f != 0 && (n3 = e4.length + (f - e4.length % f), e4 = a.concat([e4, l], n3));
            for (var n3, r3 = [], o3 = t3 ? e4.readInt32BE : e4.readInt32LE, i3 = 0; i3 < e4.length; i3 += f)
              r3.push(o3.call(e4, i3));
            return r3;
          }(e3 = a.isBuffer(e3) ? e3 : new a(e3), r2), 8 * e3.length), t2 = r2, i2 = new a(n2), u2 = t2 ? i2.writeInt32BE : i2.writeInt32LE, s2 = 0; s2 < o2.length; s2++)
            u2.call(i2, o2[s2], 4 * s2, true);
          return i2;
        } };
      }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { buffer: 3, lYpoI2: 11 }], 5: [function(v, e, _) {
      !function(l, c, u, d, h, p, g, y, w) {
        var u = v("buffer").Buffer, e2 = v("./sha"), t = v("./sha256"), n = v("./rng"), b = { sha1: e2, sha256: t, md5: v("./md5") }, s = 64, a = new u(s);
        function r(e3, n2) {
          var r2 = b[e3 = e3 || "sha1"], o2 = [];
          return r2 || i("algorithm:", e3, "is not yet supported"), { update: function(e4) {
            return u.isBuffer(e4) || (e4 = new u(e4)), o2.push(e4), e4.length, this;
          }, digest: function(e4) {
            var t2 = u.concat(o2), t2 = n2 ? function(e5, t3, n3) {
              u.isBuffer(t3) || (t3 = new u(t3)), u.isBuffer(n3) || (n3 = new u(n3)), t3.length > s ? t3 = e5(t3) : t3.length < s && (t3 = u.concat([t3, a], s));
              for (var r3 = new u(s), o3 = new u(s), i2 = 0; i2 < s; i2++)
                r3[i2] = 54 ^ t3[i2], o3[i2] = 92 ^ t3[i2];
              return n3 = e5(u.concat([r3, n3])), e5(u.concat([o3, n3]));
            }(r2, n2, t2) : r2(t2);
            return o2 = null, e4 ? t2.toString(e4) : t2;
          } };
        }
        function i() {
          var e3 = [].slice.call(arguments).join(" ");
          throw new Error([e3, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join("\n"));
        }
        a.fill(0), _.createHash = function(e3) {
          return r(e3);
        }, _.createHmac = r, _.randomBytes = function(e3, t2) {
          if (!t2 || !t2.call)
            return new u(n(e3));
          try {
            t2.call(this, void 0, new u(n(e3)));
          } catch (e4) {
            t2(e4);
          }
        };
        var o, f = ["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], m = function(e3) {
          _[e3] = function() {
            i("sorry,", e3, "is not implemented yet");
          };
        };
        for (o in f)
          m(f[o]);
      }.call(this, v("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, v("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./md5": 6, "./rng": 7, "./sha": 8, "./sha256": 9, buffer: 3, lYpoI2: 11 }], 6: [function(w, b, e) {
      !function(e2, r, o, i, u, a, f, l, y) {
        var t = w("./helpers");
        function n(e3, t2) {
          e3[t2 >> 5] |= 128 << t2 % 32, e3[14 + (t2 + 64 >>> 9 << 4)] = t2;
          for (var n2 = 1732584193, r2 = -271733879, o2 = -1732584194, i2 = 271733878, u2 = 0; u2 < e3.length; u2 += 16) {
            var s2 = n2, a2 = r2, f2 = o2, l2 = i2, n2 = c(n2, r2, o2, i2, e3[u2 + 0], 7, -680876936), i2 = c(i2, n2, r2, o2, e3[u2 + 1], 12, -389564586), o2 = c(o2, i2, n2, r2, e3[u2 + 2], 17, 606105819), r2 = c(r2, o2, i2, n2, e3[u2 + 3], 22, -1044525330);
            n2 = c(n2, r2, o2, i2, e3[u2 + 4], 7, -176418897), i2 = c(i2, n2, r2, o2, e3[u2 + 5], 12, 1200080426), o2 = c(o2, i2, n2, r2, e3[u2 + 6], 17, -1473231341), r2 = c(r2, o2, i2, n2, e3[u2 + 7], 22, -45705983), n2 = c(n2, r2, o2, i2, e3[u2 + 8], 7, 1770035416), i2 = c(i2, n2, r2, o2, e3[u2 + 9], 12, -1958414417), o2 = c(o2, i2, n2, r2, e3[u2 + 10], 17, -42063), r2 = c(r2, o2, i2, n2, e3[u2 + 11], 22, -1990404162), n2 = c(n2, r2, o2, i2, e3[u2 + 12], 7, 1804603682), i2 = c(i2, n2, r2, o2, e3[u2 + 13], 12, -40341101), o2 = c(o2, i2, n2, r2, e3[u2 + 14], 17, -1502002290), n2 = d(n2, r2 = c(r2, o2, i2, n2, e3[u2 + 15], 22, 1236535329), o2, i2, e3[u2 + 1], 5, -165796510), i2 = d(i2, n2, r2, o2, e3[u2 + 6], 9, -1069501632), o2 = d(o2, i2, n2, r2, e3[u2 + 11], 14, 643717713), r2 = d(r2, o2, i2, n2, e3[u2 + 0], 20, -373897302), n2 = d(n2, r2, o2, i2, e3[u2 + 5], 5, -701558691), i2 = d(i2, n2, r2, o2, e3[u2 + 10], 9, 38016083), o2 = d(o2, i2, n2, r2, e3[u2 + 15], 14, -660478335), r2 = d(r2, o2, i2, n2, e3[u2 + 4], 20, -405537848), n2 = d(n2, r2, o2, i2, e3[u2 + 9], 5, 568446438), i2 = d(i2, n2, r2, o2, e3[u2 + 14], 9, -1019803690), o2 = d(o2, i2, n2, r2, e3[u2 + 3], 14, -187363961), r2 = d(r2, o2, i2, n2, e3[u2 + 8], 20, 1163531501), n2 = d(n2, r2, o2, i2, e3[u2 + 13], 5, -1444681467), i2 = d(i2, n2, r2, o2, e3[u2 + 2], 9, -51403784), o2 = d(o2, i2, n2, r2, e3[u2 + 7], 14, 1735328473), n2 = h(n2, r2 = d(r2, o2, i2, n2, e3[u2 + 12], 20, -1926607734), o2, i2, e3[u2 + 5], 4, -378558), i2 = h(i2, n2, r2, o2, e3[u2 + 8], 11, -2022574463), o2 = h(o2, i2, n2, r2, e3[u2 + 11], 16, 1839030562), r2 = h(r2, o2, i2, n2, e3[u2 + 14], 23, -35309556), n2 = h(n2, r2, o2, i2, e3[u2 + 1], 4, -1530992060), i2 = h(i2, n2, r2, o2, e3[u2 + 4], 11, 1272893353), o2 = h(o2, i2, n2, r2, e3[u2 + 7], 16, -155497632), r2 = h(r2, o2, i2, n2, e3[u2 + 10], 23, -1094730640), n2 = h(n2, r2, o2, i2, e3[u2 + 13], 4, 681279174), i2 = h(i2, n2, r2, o2, e3[u2 + 0], 11, -358537222), o2 = h(o2, i2, n2, r2, e3[u2 + 3], 16, -722521979), r2 = h(r2, o2, i2, n2, e3[u2 + 6], 23, 76029189), n2 = h(n2, r2, o2, i2, e3[u2 + 9], 4, -640364487), i2 = h(i2, n2, r2, o2, e3[u2 + 12], 11, -421815835), o2 = h(o2, i2, n2, r2, e3[u2 + 15], 16, 530742520), n2 = p(n2, r2 = h(r2, o2, i2, n2, e3[u2 + 2], 23, -995338651), o2, i2, e3[u2 + 0], 6, -198630844), i2 = p(i2, n2, r2, o2, e3[u2 + 7], 10, 1126891415), o2 = p(o2, i2, n2, r2, e3[u2 + 14], 15, -1416354905), r2 = p(r2, o2, i2, n2, e3[u2 + 5], 21, -57434055), n2 = p(n2, r2, o2, i2, e3[u2 + 12], 6, 1700485571), i2 = p(i2, n2, r2, o2, e3[u2 + 3], 10, -1894986606), o2 = p(o2, i2, n2, r2, e3[u2 + 10], 15, -1051523), r2 = p(r2, o2, i2, n2, e3[u2 + 1], 21, -2054922799), n2 = p(n2, r2, o2, i2, e3[u2 + 8], 6, 1873313359), i2 = p(i2, n2, r2, o2, e3[u2 + 15], 10, -30611744), o2 = p(o2, i2, n2, r2, e3[u2 + 6], 15, -1560198380), r2 = p(r2, o2, i2, n2, e3[u2 + 13], 21, 1309151649), n2 = p(n2, r2, o2, i2, e3[u2 + 4], 6, -145523070), i2 = p(i2, n2, r2, o2, e3[u2 + 11], 10, -1120210379), o2 = p(o2, i2, n2, r2, e3[u2 + 2], 15, 718787259), r2 = p(r2, o2, i2, n2, e3[u2 + 9], 21, -343485551), n2 = g(n2, s2), r2 = g(r2, a2), o2 = g(o2, f2), i2 = g(i2, l2);
          }
          return Array(n2, r2, o2, i2);
        }
        function s(e3, t2, n2, r2, o2, i2) {
          return g((t2 = g(g(t2, e3), g(r2, i2))) << o2 | t2 >>> 32 - o2, n2);
        }
        function c(e3, t2, n2, r2, o2, i2, u2) {
          return s(t2 & n2 | ~t2 & r2, e3, t2, o2, i2, u2);
        }
        function d(e3, t2, n2, r2, o2, i2, u2) {
          return s(t2 & r2 | n2 & ~r2, e3, t2, o2, i2, u2);
        }
        function h(e3, t2, n2, r2, o2, i2, u2) {
          return s(t2 ^ n2 ^ r2, e3, t2, o2, i2, u2);
        }
        function p(e3, t2, n2, r2, o2, i2, u2) {
          return s(n2 ^ (t2 | ~r2), e3, t2, o2, i2, u2);
        }
        function g(e3, t2) {
          var n2 = (65535 & e3) + (65535 & t2);
          return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
        }
        b.exports = function(e3) {
          return t.hash(e3, n, 16);
        };
      }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 7: [function(e, l, t) {
      !function(e2, t2, n, r, o, i, u, s, f) {
        l.exports = function(e3) {
          for (var t3, n2 = new Array(e3), r2 = 0; r2 < e3; r2++)
            0 == (3 & r2) && (t3 = 4294967296 * Math.random()), n2[r2] = t3 >>> ((3 & r2) << 3) & 255;
          return n2;
        };
      }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { buffer: 3, lYpoI2: 11 }], 8: [function(c, d, e) {
      !function(e2, t, n, r, o, s, a, f, l) {
        var i = c("./helpers");
        function u(l2, c2) {
          l2[c2 >> 5] |= 128 << 24 - c2 % 32, l2[15 + (c2 + 64 >> 9 << 4)] = c2;
          for (var e3, t2, n2, r2 = Array(80), o2 = 1732584193, i2 = -271733879, u2 = -1732584194, s2 = 271733878, d2 = -1009589776, h = 0; h < l2.length; h += 16) {
            for (var p = o2, g = i2, y = u2, w = s2, b = d2, a2 = 0; a2 < 80; a2++) {
              r2[a2] = a2 < 16 ? l2[h + a2] : v(r2[a2 - 3] ^ r2[a2 - 8] ^ r2[a2 - 14] ^ r2[a2 - 16], 1);
              var f2 = m(m(v(o2, 5), (f2 = i2, t2 = u2, n2 = s2, (e3 = a2) < 20 ? f2 & t2 | ~f2 & n2 : !(e3 < 40) && e3 < 60 ? f2 & t2 | f2 & n2 | t2 & n2 : f2 ^ t2 ^ n2)), m(m(d2, r2[a2]), (e3 = a2) < 20 ? 1518500249 : e3 < 40 ? 1859775393 : e3 < 60 ? -1894007588 : -899497514)), d2 = s2, s2 = u2, u2 = v(i2, 30), i2 = o2, o2 = f2;
            }
            o2 = m(o2, p), i2 = m(i2, g), u2 = m(u2, y), s2 = m(s2, w), d2 = m(d2, b);
          }
          return Array(o2, i2, u2, s2, d2);
        }
        function m(e3, t2) {
          var n2 = (65535 & e3) + (65535 & t2);
          return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
        }
        function v(e3, t2) {
          return e3 << t2 | e3 >>> 32 - t2;
        }
        d.exports = function(e3) {
          return i.hash(e3, u, 20, true);
        };
      }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 9: [function(c, d, e) {
      !function(e2, t, n, r, u, s, a, f, l) {
        function b(e3, t2) {
          var n2 = (65535 & e3) + (65535 & t2);
          return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
        }
        function o(e3, l2) {
          var c2, d2 = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), t2 = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), n2 = new Array(64);
          e3[l2 >> 5] |= 128 << 24 - l2 % 32, e3[15 + (l2 + 64 >> 9 << 4)] = l2;
          for (var r2, o2, h = 0; h < e3.length; h += 16) {
            for (var i2 = t2[0], u2 = t2[1], s2 = t2[2], p = t2[3], a2 = t2[4], g = t2[5], y = t2[6], w = t2[7], f2 = 0; f2 < 64; f2++)
              n2[f2] = f2 < 16 ? e3[f2 + h] : b(b(b((o2 = n2[f2 - 2], m(o2, 17) ^ m(o2, 19) ^ v(o2, 10)), n2[f2 - 7]), (o2 = n2[f2 - 15], m(o2, 7) ^ m(o2, 18) ^ v(o2, 3))), n2[f2 - 16]), c2 = b(b(b(b(w, m(o2 = a2, 6) ^ m(o2, 11) ^ m(o2, 25)), a2 & g ^ ~a2 & y), d2[f2]), n2[f2]), r2 = b(m(r2 = i2, 2) ^ m(r2, 13) ^ m(r2, 22), i2 & u2 ^ i2 & s2 ^ u2 & s2), w = y, y = g, g = a2, a2 = b(p, c2), p = s2, s2 = u2, u2 = i2, i2 = b(c2, r2);
            t2[0] = b(i2, t2[0]), t2[1] = b(u2, t2[1]), t2[2] = b(s2, t2[2]), t2[3] = b(p, t2[3]), t2[4] = b(a2, t2[4]), t2[5] = b(g, t2[5]), t2[6] = b(y, t2[6]), t2[7] = b(w, t2[7]);
          }
          return t2;
        }
        var i = c("./helpers"), m = function(e3, t2) {
          return e3 >>> t2 | e3 << 32 - t2;
        }, v = function(e3, t2) {
          return e3 >>> t2;
        };
        d.exports = function(e3) {
          return i.hash(e3, o, 32, true);
        };
      }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
    }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 10: [function(e, t, f) {
      !function(e2, t2, n, r, o, i, u, s, a) {
        f.read = function(e3, t3, n2, r2, o2) {
          var i2, u2, l = 8 * o2 - r2 - 1, c = (1 << l) - 1, d = c >> 1, s2 = -7, a2 = n2 ? o2 - 1 : 0, f2 = n2 ? -1 : 1, o2 = e3[t3 + a2];
          for (a2 += f2, i2 = o2 & (1 << -s2) - 1, o2 >>= -s2, s2 += l; 0 < s2; i2 = 256 * i2 + e3[t3 + a2], a2 += f2, s2 -= 8)
            ;
          for (u2 = i2 & (1 << -s2) - 1, i2 >>= -s2, s2 += r2; 0 < s2; u2 = 256 * u2 + e3[t3 + a2], a2 += f2, s2 -= 8)
            ;
          if (0 === i2)
            i2 = 1 - d;
          else {
            if (i2 === c)
              return u2 ? NaN : 1 / 0 * (o2 ? -1 : 1);
            u2 += Math.pow(2, r2), i2 -= d;
          }
          return (o2 ? -1 : 1) * u2 * Math.pow(2, i2 - r2);
        }, f.write = function(e3, t3, l, n2, r2, c) {
          var o2, i2, u2 = 8 * c - r2 - 1, s2 = (1 << u2) - 1, a2 = s2 >> 1, d = 23 === r2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f2 = n2 ? 0 : c - 1, h = n2 ? 1 : -1, c = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
          for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (i2 = isNaN(t3) ? 1 : 0, o2 = s2) : (o2 = Math.floor(Math.log(t3) / Math.LN2), t3 * (n2 = Math.pow(2, -o2)) < 1 && (o2--, n2 *= 2), 2 <= (t3 += 1 <= o2 + a2 ? d / n2 : d * Math.pow(2, 1 - a2)) * n2 && (o2++, n2 /= 2), s2 <= o2 + a2 ? (i2 = 0, o2 = s2) : 1 <= o2 + a2 ? (i2 = (t3 * n2 - 1) * Math.pow(2, r2), o2 += a2) : (i2 = t3 * Math.pow(2, a2 - 1) * Math.pow(2, r2), o2 = 0)); 8 <= r2; e3[l + f2] = 255 & i2, f2 += h, i2 /= 256, r2 -= 8)
            ;
          for (o2 = o2 << r2 | i2, u2 += r2; 0 < u2; e3[l + f2] = 255 & o2, f2 += h, o2 /= 256, u2 -= 8)
            ;
          e3[l + f2 - h] |= 128 * c;
        };
      }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/ieee754/index.js", "/node_modules/gulp-browserify/node_modules/ieee754");
    }, { buffer: 3, lYpoI2: 11 }], 11: [function(e, h, t) {
      !function(e2, t2, n, r, o, f, l, c, d) {
        var i, u, s;
        function a() {
        }
        (e2 = h.exports = {}).nextTick = (u = "undefined" != typeof window && window.setImmediate, s = "undefined" != typeof window && window.postMessage && window.addEventListener, u ? function(e3) {
          return window.setImmediate(e3);
        } : s ? (i = [], window.addEventListener("message", function(e3) {
          var t3 = e3.source;
          t3 !== window && null !== t3 || "process-tick" !== e3.data || (e3.stopPropagation(), 0 < i.length && i.shift()());
        }, true), function(e3) {
          i.push(e3), window.postMessage("process-tick", "*");
        }) : function(e3) {
          setTimeout(e3, 0);
        }), e2.title = "browser", e2.browser = true, e2.env = {}, e2.argv = [], e2.on = a, e2.addListener = a, e2.once = a, e2.off = a, e2.removeListener = a, e2.removeAllListeners = a, e2.emit = a, e2.binding = function(e3) {
          throw new Error("process.binding is not supported");
        }, e2.cwd = function() {
          return "/";
        }, e2.chdir = function(e3) {
          throw new Error("process.chdir is not supported");
        };
      }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
    }, { buffer: 3, lYpoI2: 11 }] }, {}, [1])(1);
  });
})(object_hash);
const hash = object_hash.exports;
const getCacheKey = (...strings) => hash(strings.join("_"));
const RUN_KEY = "__run";
class BaseChatMessage {
  constructor(text2) {
    Object.defineProperty(this, "text", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.text = text2;
  }
  toJSON() {
    return {
      type: this._getType(),
      data: {
        content: this.text,
        role: "role" in this ? this.role : void 0
      }
    };
  }
}
class HumanChatMessage extends BaseChatMessage {
  _getType() {
    return "human";
  }
}
class AIChatMessage extends BaseChatMessage {
  _getType() {
    return "ai";
  }
}
class SystemChatMessage extends BaseChatMessage {
  _getType() {
    return "system";
  }
}
class ChatMessage extends BaseChatMessage {
  constructor(text2, role) {
    super(text2);
    Object.defineProperty(this, "role", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.role = role;
  }
  _getType() {
    return "generic";
  }
}
class BaseCache {
}
const GLOBAL_MAP = /* @__PURE__ */ new Map();
class InMemoryCache extends BaseCache {
  constructor(map) {
    super();
    Object.defineProperty(this, "cache", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.cache = map != null ? map : /* @__PURE__ */ new Map();
  }
  lookup(prompt, llmKey) {
    var _a;
    return Promise.resolve((_a = this.cache.get(getCacheKey(prompt, llmKey))) != null ? _a : null);
  }
  async update(prompt, llmKey, value) {
    this.cache.set(getCacheKey(prompt, llmKey), value);
  }
  static global() {
    return new InMemoryCache(GLOBAL_MAP);
  }
}
var pRetry$1 = { exports: {} };
var retry$2 = { exports: {} };
var retry$1 = {};
function RetryOperation(timeouts, options2) {
  if (typeof options2 === "boolean") {
    options2 = { forever: options2 };
  }
  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
  this._timeouts = timeouts;
  this._options = options2 || {};
  this._maxRetryTime = options2 && options2.maxRetryTime || Infinity;
  this._fn = null;
  this._errors = [];
  this._attempts = 1;
  this._operationTimeout = null;
  this._operationTimeoutCb = null;
  this._timeout = null;
  this._operationStart = null;
  this._timer = null;
  if (this._options.forever) {
    this._cachedTimeouts = this._timeouts.slice(0);
  }
}
var retry_operation = RetryOperation;
RetryOperation.prototype.reset = function() {
  this._attempts = 1;
  this._timeouts = this._originalTimeouts.slice(0);
};
RetryOperation.prototype.stop = function() {
  if (this._timeout) {
    clearTimeout(this._timeout);
  }
  if (this._timer) {
    clearTimeout(this._timer);
  }
  this._timeouts = [];
  this._cachedTimeouts = null;
};
RetryOperation.prototype.retry = function(err) {
  if (this._timeout) {
    clearTimeout(this._timeout);
  }
  if (!err) {
    return false;
  }
  var currentTime = new Date().getTime();
  if (err && currentTime - this._operationStart >= this._maxRetryTime) {
    this._errors.push(err);
    this._errors.unshift(new Error("RetryOperation timeout occurred"));
    return false;
  }
  this._errors.push(err);
  var timeout = this._timeouts.shift();
  if (timeout === void 0) {
    if (this._cachedTimeouts) {
      this._errors.splice(0, this._errors.length - 1);
      timeout = this._cachedTimeouts.slice(-1);
    } else {
      return false;
    }
  }
  var self2 = this;
  this._timer = setTimeout(function() {
    self2._attempts++;
    if (self2._operationTimeoutCb) {
      self2._timeout = setTimeout(function() {
        self2._operationTimeoutCb(self2._attempts);
      }, self2._operationTimeout);
      if (self2._options.unref) {
        self2._timeout.unref();
      }
    }
    self2._fn(self2._attempts);
  }, timeout);
  if (this._options.unref) {
    this._timer.unref();
  }
  return true;
};
RetryOperation.prototype.attempt = function(fn, timeoutOps) {
  this._fn = fn;
  if (timeoutOps) {
    if (timeoutOps.timeout) {
      this._operationTimeout = timeoutOps.timeout;
    }
    if (timeoutOps.cb) {
      this._operationTimeoutCb = timeoutOps.cb;
    }
  }
  var self2 = this;
  if (this._operationTimeoutCb) {
    this._timeout = setTimeout(function() {
      self2._operationTimeoutCb();
    }, self2._operationTimeout);
  }
  this._operationStart = new Date().getTime();
  this._fn(this._attempts);
};
RetryOperation.prototype.try = function(fn) {
  console.log("Using RetryOperation.try() is deprecated");
  this.attempt(fn);
};
RetryOperation.prototype.start = function(fn) {
  console.log("Using RetryOperation.start() is deprecated");
  this.attempt(fn);
};
RetryOperation.prototype.start = RetryOperation.prototype.try;
RetryOperation.prototype.errors = function() {
  return this._errors;
};
RetryOperation.prototype.attempts = function() {
  return this._attempts;
};
RetryOperation.prototype.mainError = function() {
  if (this._errors.length === 0) {
    return null;
  }
  var counts = {};
  var mainError = null;
  var mainErrorCount = 0;
  for (var i = 0; i < this._errors.length; i++) {
    var error = this._errors[i];
    var message = error.message;
    var count = (counts[message] || 0) + 1;
    counts[message] = count;
    if (count >= mainErrorCount) {
      mainError = error;
      mainErrorCount = count;
    }
  }
  return mainError;
};
(function(exports2) {
  var RetryOperation2 = retry_operation;
  exports2.operation = function(options2) {
    var timeouts = exports2.timeouts(options2);
    return new RetryOperation2(timeouts, {
      forever: options2 && (options2.forever || options2.retries === Infinity),
      unref: options2 && options2.unref,
      maxRetryTime: options2 && options2.maxRetryTime
    });
  };
  exports2.timeouts = function(options2) {
    if (options2 instanceof Array) {
      return [].concat(options2);
    }
    var opts = {
      retries: 10,
      factor: 2,
      minTimeout: 1 * 1e3,
      maxTimeout: Infinity,
      randomize: false
    };
    for (var key in options2) {
      opts[key] = options2[key];
    }
    if (opts.minTimeout > opts.maxTimeout) {
      throw new Error("minTimeout is greater than maxTimeout");
    }
    var timeouts = [];
    for (var i = 0; i < opts.retries; i++) {
      timeouts.push(this.createTimeout(i, opts));
    }
    if (options2 && options2.forever && !timeouts.length) {
      timeouts.push(this.createTimeout(i, opts));
    }
    timeouts.sort(function(a, b) {
      return a - b;
    });
    return timeouts;
  };
  exports2.createTimeout = function(attempt, opts) {
    var random = opts.randomize ? Math.random() + 1 : 1;
    var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
    timeout = Math.min(timeout, opts.maxTimeout);
    return timeout;
  };
  exports2.wrap = function(obj, options2, methods) {
    if (options2 instanceof Array) {
      methods = options2;
      options2 = null;
    }
    if (!methods) {
      methods = [];
      for (var key in obj) {
        if (typeof obj[key] === "function") {
          methods.push(key);
        }
      }
    }
    for (var i = 0; i < methods.length; i++) {
      var method = methods[i];
      var original = obj[method];
      obj[method] = function retryWrapper(original2) {
        var op = exports2.operation(options2);
        var args = Array.prototype.slice.call(arguments, 1);
        var callback = args.pop();
        args.push(function(err) {
          if (op.retry(err)) {
            return;
          }
          if (err) {
            arguments[0] = op.mainError();
          }
          callback.apply(this, arguments);
        });
        op.attempt(function() {
          original2.apply(obj, args);
        });
      }.bind(obj, original);
      obj[method].options = options2;
    }
  };
})(retry$1);
(function(module2) {
  module2.exports = retry$1;
})(retry$2);
const retry = retry$2.exports;
const networkErrorMsgs = [
  "Failed to fetch",
  "NetworkError when attempting to fetch resource.",
  "The Internet connection appears to be offline.",
  "Network request failed"
];
class AbortError extends Error {
  constructor(message) {
    super();
    if (message instanceof Error) {
      this.originalError = message;
      ({ message } = message);
    } else {
      this.originalError = new Error(message);
      this.originalError.stack = this.stack;
    }
    this.name = "AbortError";
    this.message = message;
  }
}
const decorateErrorWithCounts = (error, attemptNumber, options2) => {
  const retriesLeft = options2.retries - (attemptNumber - 1);
  error.attemptNumber = attemptNumber;
  error.retriesLeft = retriesLeft;
  return error;
};
const isNetworkError = (errorMessage) => networkErrorMsgs.includes(errorMessage);
const pRetry = (input, options2) => new Promise((resolve, reject) => {
  options2 = {
    onFailedAttempt: () => {
    },
    retries: 10,
    ...options2
  };
  const operation = retry.operation(options2);
  operation.attempt(async (attemptNumber) => {
    try {
      resolve(await input(attemptNumber));
    } catch (error) {
      if (!(error instanceof Error)) {
        reject(new TypeError(`Non-error was thrown: "${error}". You should only throw errors.`));
        return;
      }
      if (error instanceof AbortError) {
        operation.stop();
        reject(error.originalError);
      } else if (error instanceof TypeError && !isNetworkError(error.message)) {
        operation.stop();
        reject(error);
      } else {
        decorateErrorWithCounts(error, attemptNumber, options2);
        try {
          await options2.onFailedAttempt(error);
        } catch (error2) {
          reject(error2);
          return;
        }
        if (!operation.retry(error)) {
          reject(operation.mainError());
        }
      }
    }
  });
});
pRetry$1.exports = pRetry;
pRetry$1.exports.default = pRetry;
pRetry$1.exports.AbortError = AbortError;
var dist = {};
var eventemitter3 = { exports: {} };
(function(module2) {
  var has = Object.prototype.hasOwnProperty, prefix = "~";
  function Events() {
  }
  if (Object.create) {
    Events.prototype = /* @__PURE__ */ Object.create(null);
    if (!new Events().__proto__)
      prefix = false;
  }
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") {
      throw new TypeError("The listener must be a function");
    }
    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt])
      emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn)
      emitter._events[evt].push(listener);
    else
      emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0)
      emitter._events = new Events();
    else
      delete emitter._events[evt];
  }
  function EventEmitter2() {
    this._events = new Events();
    this._eventsCount = 0;
  }
  EventEmitter2.prototype.eventNames = function eventNames() {
    var names = [], events, name2;
    if (this._eventsCount === 0)
      return names;
    for (name2 in events = this._events) {
      if (has.call(events, name2))
        names.push(prefix ? name2.slice(1) : name2);
    }
    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }
    return names;
  };
  EventEmitter2.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers = this._events[evt];
    if (!handlers)
      return [];
    if (handlers.fn)
      return [handlers.fn];
    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }
    return ee;
  };
  EventEmitter2.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners)
      return 0;
    if (listeners.fn)
      return 1;
    return listeners.length;
  };
  EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
      return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
      if (listeners.once)
        this.removeListener(event, listeners.fn, void 0, true);
      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }
      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }
      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length, j;
      for (i = 0; i < length; i++) {
        if (listeners[i].once)
          this.removeListener(event, listeners[i].fn, void 0, true);
        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;
          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;
          default:
            if (!args)
              for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }
    return true;
  };
  EventEmitter2.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  EventEmitter2.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
      return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }
      if (events.length)
        this._events[evt] = events.length === 1 ? events[0] : events;
      else
        clearEvent(this, evt);
    }
    return this;
  };
  EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt])
        clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }
    return this;
  };
  EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
  EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
  EventEmitter2.prefixed = prefix;
  EventEmitter2.EventEmitter = EventEmitter2;
  {
    module2.exports = EventEmitter2;
  }
})(eventemitter3);
var pTimeout$1 = { exports: {} };
var pFinally$1 = (promise, onFinally) => {
  onFinally = onFinally || (() => {
  });
  return promise.then(
    (val) => new Promise((resolve) => {
      resolve(onFinally());
    }).then(() => val),
    (err) => new Promise((resolve) => {
      resolve(onFinally());
    }).then(() => {
      throw err;
    })
  );
};
const pFinally = pFinally$1;
class TimeoutError extends Error {
  constructor(message) {
    super(message);
    this.name = "TimeoutError";
  }
}
const pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {
  if (typeof milliseconds !== "number" || milliseconds < 0) {
    throw new TypeError("Expected `milliseconds` to be a positive number");
  }
  if (milliseconds === Infinity) {
    resolve(promise);
    return;
  }
  const timer = setTimeout(() => {
    if (typeof fallback === "function") {
      try {
        resolve(fallback());
      } catch (error) {
        reject(error);
      }
      return;
    }
    const message = typeof fallback === "string" ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
    const timeoutError2 = fallback instanceof Error ? fallback : new TimeoutError(message);
    if (typeof promise.cancel === "function") {
      promise.cancel();
    }
    reject(timeoutError2);
  }, milliseconds);
  pFinally(
    promise.then(resolve, reject),
    () => {
      clearTimeout(timer);
    }
  );
});
pTimeout$1.exports = pTimeout;
pTimeout$1.exports.default = pTimeout;
pTimeout$1.exports.TimeoutError = TimeoutError;
var priorityQueue = {};
var lowerBound$1 = {};
Object.defineProperty(lowerBound$1, "__esModule", { value: true });
function lowerBound(array, value, comparator) {
  let first = 0;
  let count = array.length;
  while (count > 0) {
    const step = count / 2 | 0;
    let it = first + step;
    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }
  return first;
}
lowerBound$1.default = lowerBound;
Object.defineProperty(priorityQueue, "__esModule", { value: true });
const lower_bound_1 = lowerBound$1;
class PriorityQueue {
  constructor() {
    this._queue = [];
  }
  enqueue(run2, options2) {
    options2 = Object.assign({ priority: 0 }, options2);
    const element2 = {
      priority: options2.priority,
      run: run2
    };
    if (this.size && this._queue[this.size - 1].priority >= options2.priority) {
      this._queue.push(element2);
      return;
    }
    const index = lower_bound_1.default(this._queue, element2, (a, b) => b.priority - a.priority);
    this._queue.splice(index, 0, element2);
  }
  dequeue() {
    const item = this._queue.shift();
    return item === null || item === void 0 ? void 0 : item.run;
  }
  filter(options2) {
    return this._queue.filter((element2) => element2.priority === options2.priority).map((element2) => element2.run);
  }
  get size() {
    return this._queue.length;
  }
}
priorityQueue.default = PriorityQueue;
Object.defineProperty(dist, "__esModule", { value: true });
const EventEmitter = eventemitter3.exports;
const p_timeout_1 = pTimeout$1.exports;
const priority_queue_1 = priorityQueue;
const empty = () => {
};
const timeoutError = new p_timeout_1.TimeoutError();
class PQueue extends EventEmitter {
  constructor(options2) {
    var _a, _b, _c, _d;
    super();
    this._intervalCount = 0;
    this._intervalEnd = 0;
    this._pendingCount = 0;
    this._resolveEmpty = empty;
    this._resolveIdle = empty;
    options2 = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default }, options2);
    if (!(typeof options2.intervalCap === "number" && options2.intervalCap >= 1)) {
      throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a = options2.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ""}\` (${typeof options2.intervalCap})`);
    }
    if (options2.interval === void 0 || !(Number.isFinite(options2.interval) && options2.interval >= 0)) {
      throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options2.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""}\` (${typeof options2.interval})`);
    }
    this._carryoverConcurrencyCount = options2.carryoverConcurrencyCount;
    this._isIntervalIgnored = options2.intervalCap === Infinity || options2.interval === 0;
    this._intervalCap = options2.intervalCap;
    this._interval = options2.interval;
    this._queue = new options2.queueClass();
    this._queueClass = options2.queueClass;
    this.concurrency = options2.concurrency;
    this._timeout = options2.timeout;
    this._throwOnTimeout = options2.throwOnTimeout === true;
    this._isPaused = options2.autoStart === false;
  }
  get _doesIntervalAllowAnother() {
    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
  }
  get _doesConcurrentAllowAnother() {
    return this._pendingCount < this._concurrency;
  }
  _next() {
    this._pendingCount--;
    this._tryToStartAnother();
    this.emit("next");
  }
  _resolvePromises() {
    this._resolveEmpty();
    this._resolveEmpty = empty;
    if (this._pendingCount === 0) {
      this._resolveIdle();
      this._resolveIdle = empty;
      this.emit("idle");
    }
  }
  _onResumeInterval() {
    this._onInterval();
    this._initializeIntervalIfNeeded();
    this._timeoutId = void 0;
  }
  _isIntervalPaused() {
    const now = Date.now();
    if (this._intervalId === void 0) {
      const delay = this._intervalEnd - now;
      if (delay < 0) {
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
      } else {
        if (this._timeoutId === void 0) {
          this._timeoutId = setTimeout(() => {
            this._onResumeInterval();
          }, delay);
        }
        return true;
      }
    }
    return false;
  }
  _tryToStartAnother() {
    if (this._queue.size === 0) {
      if (this._intervalId) {
        clearInterval(this._intervalId);
      }
      this._intervalId = void 0;
      this._resolvePromises();
      return false;
    }
    if (!this._isPaused) {
      const canInitializeInterval = !this._isIntervalPaused();
      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
        const job = this._queue.dequeue();
        if (!job) {
          return false;
        }
        this.emit("active");
        job();
        if (canInitializeInterval) {
          this._initializeIntervalIfNeeded();
        }
        return true;
      }
    }
    return false;
  }
  _initializeIntervalIfNeeded() {
    if (this._isIntervalIgnored || this._intervalId !== void 0) {
      return;
    }
    this._intervalId = setInterval(() => {
      this._onInterval();
    }, this._interval);
    this._intervalEnd = Date.now() + this._interval;
  }
  _onInterval() {
    if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
      clearInterval(this._intervalId);
      this._intervalId = void 0;
    }
    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
    this._processQueue();
  }
  _processQueue() {
    while (this._tryToStartAnother()) {
    }
  }
  get concurrency() {
    return this._concurrency;
  }
  set concurrency(newConcurrency) {
    if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
    }
    this._concurrency = newConcurrency;
    this._processQueue();
  }
  async add(fn, options2 = {}) {
    return new Promise((resolve, reject) => {
      const run2 = async () => {
        this._pendingCount++;
        this._intervalCount++;
        try {
          const operation = this._timeout === void 0 && options2.timeout === void 0 ? fn() : p_timeout_1.default(Promise.resolve(fn()), options2.timeout === void 0 ? this._timeout : options2.timeout, () => {
            if (options2.throwOnTimeout === void 0 ? this._throwOnTimeout : options2.throwOnTimeout) {
              reject(timeoutError);
            }
            return void 0;
          });
          resolve(await operation);
        } catch (error) {
          reject(error);
        }
        this._next();
      };
      this._queue.enqueue(run2, options2);
      this._tryToStartAnother();
      this.emit("add");
    });
  }
  async addAll(functions, options2) {
    return Promise.all(functions.map(async (function_) => this.add(function_, options2)));
  }
  start() {
    if (!this._isPaused) {
      return this;
    }
    this._isPaused = false;
    this._processQueue();
    return this;
  }
  pause() {
    this._isPaused = true;
  }
  clear() {
    this._queue = new this._queueClass();
  }
  async onEmpty() {
    if (this._queue.size === 0) {
      return;
    }
    return new Promise((resolve) => {
      const existingResolve = this._resolveEmpty;
      this._resolveEmpty = () => {
        existingResolve();
        resolve();
      };
    });
  }
  async onIdle() {
    if (this._pendingCount === 0 && this._queue.size === 0) {
      return;
    }
    return new Promise((resolve) => {
      const existingResolve = this._resolveIdle;
      this._resolveIdle = () => {
        existingResolve();
        resolve();
      };
    });
  }
  get size() {
    return this._queue.size;
  }
  sizeBy(options2) {
    return this._queue.filter(options2).length;
  }
  get pending() {
    return this._pendingCount;
  }
  get isPaused() {
    return this._isPaused;
  }
  get timeout() {
    return this._timeout;
  }
  set timeout(milliseconds) {
    this._timeout = milliseconds;
  }
}
var _default = dist.default = PQueue;
const STATUS_NO_RETRY = [
  400,
  401,
  403,
  404,
  405,
  406,
  407,
  408,
  409
];
class AsyncCaller {
  constructor(params) {
    var _a, _b;
    Object.defineProperty(this, "maxConcurrency", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maxRetries", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "queue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxConcurrency = (_a = params.maxConcurrency) != null ? _a : Infinity;
    this.maxRetries = (_b = params.maxRetries) != null ? _b : 6;
    const PQueue2 = "default" in _default ? _default.default : _default;
    this.queue = new PQueue2({ concurrency: this.maxConcurrency });
  }
  call(callable, ...args) {
    return this.queue.add(() => pRetry$1.exports(() => callable(...args).catch((error) => {
      if (error instanceof Error) {
        throw error;
      } else {
        throw new Error(error);
      }
    }), {
      onFailedAttempt(error) {
        var _a;
        if (error.message.startsWith("Cancel") || error.message.startsWith("TimeoutError") || error.message.startsWith("AbortError")) {
          throw error;
        }
        if ((error == null ? void 0 : error.code) === "ECONNABORTED") {
          throw error;
        }
        const status = (_a = error == null ? void 0 : error.response) == null ? void 0 : _a.status;
        if (status && STATUS_NO_RETRY.includes(+status)) {
          throw error;
        }
      },
      retries: this.maxRetries,
      randomize: true
    }), { throwOnTimeout: true });
  }
  callWithOptions(options2, callable, ...args) {
    if (options2.signal) {
      return Promise.race([
        this.call(callable, ...args),
        new Promise((_, reject) => {
          var _a;
          (_a = options2.signal) == null ? void 0 : _a.addEventListener("abort", () => {
            reject(new Error("AbortError"));
          });
        })
      ]);
    }
    return this.call(callable, ...args);
  }
  fetch(...args) {
    return this.call(() => fetch(...args).then((res) => res.ok ? res : Promise.reject(res)));
  }
}
var __defProp2 = Object.defineProperty;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField2 = (obj, key, value) => {
  __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1)
    validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;
  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
    );
  }
  return parts.join("");
}
function bytePairMerge(piece, ranks) {
  let parts = Array.from(
    { length: piece.length },
    (_, i) => ({ start: i, end: i + 1 })
  );
  while (parts.length > 1) {
    let minRank = null;
    for (let i = 0; i < parts.length - 1; i++) {
      const slice = piece.slice(parts[i].start, parts[i + 1].end);
      const rank = ranks.get(slice.join(","));
      if (rank == null)
        continue;
      if (minRank == null || rank < minRank[0]) {
        minRank = [rank, i];
      }
    }
    if (minRank != null) {
      const i = minRank[1];
      parts[i] = { start: parts[i].start, end: parts[i + 1].end };
      parts.splice(i + 1, 1);
    } else {
      break;
    }
  }
  return parts;
}
function bytePairEncode(piece, ranks) {
  if (piece.length === 1)
    return [ranks.get(piece.join(","))];
  return bytePairMerge(piece, ranks).map((p) => ranks.get(piece.slice(p.start, p.end).join(","))).filter((x) => x != null);
}
function escapeRegex(str) {
  return str.replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
}
var _Tiktoken = class {
  constructor(ranks, extendedSpecialTokens) {
    __publicField(this, "specialTokens");
    __publicField(this, "inverseSpecialTokens");
    __publicField(this, "patStr");
    __publicField(this, "textEncoder", new TextEncoder());
    __publicField(this, "textDecoder", new TextDecoder("utf-8"));
    __publicField(this, "rankMap", /* @__PURE__ */ new Map());
    __publicField(this, "textMap", /* @__PURE__ */ new Map());
    this.patStr = ranks.pat_str;
    const uncompressed = ranks.bpe_ranks.split("\n").filter(Boolean).reduce((memo, x) => {
      const [_, offsetStr, ...tokens] = x.split(" ");
      const offset = Number.parseInt(offsetStr, 10);
      tokens.forEach((token, i) => memo[token] = offset + i);
      return memo;
    }, {});
    for (const [token, rank] of Object.entries(uncompressed)) {
      const bytes = base64Js.toByteArray(token);
      this.rankMap.set(bytes.join(","), rank);
      this.textMap.set(rank, bytes);
    }
    this.specialTokens = { ...ranks.special_tokens, ...extendedSpecialTokens };
    this.inverseSpecialTokens = Object.entries(this.specialTokens).reduce((memo, [text2, rank]) => {
      memo[rank] = this.textEncoder.encode(text2);
      return memo;
    }, {});
  }
  encode(text2, allowedSpecial = [], disallowedSpecial = "all") {
    var _a;
    const regexes = new RegExp(this.patStr, "ug");
    const specialRegex = _Tiktoken.specialTokenRegex(
      Object.keys(this.specialTokens)
    );
    const ret = [];
    const allowedSpecialSet = new Set(
      allowedSpecial === "all" ? Object.keys(this.specialTokens) : allowedSpecial
    );
    const disallowedSpecialSet = new Set(
      disallowedSpecial === "all" ? Object.keys(this.specialTokens).filter(
        (x) => !allowedSpecialSet.has(x)
      ) : disallowedSpecial
    );
    if (disallowedSpecialSet.size > 0) {
      const disallowedSpecialRegex = _Tiktoken.specialTokenRegex([
        ...disallowedSpecialSet
      ]);
      const specialMatch = text2.match(disallowedSpecialRegex);
      if (specialMatch != null) {
        throw new Error(
          `The text contains a special token that is not allowed: ${specialMatch[0]}`
        );
      }
    }
    let start = 0;
    while (true) {
      let nextSpecial = null;
      let startFind = start;
      while (true) {
        specialRegex.lastIndex = startFind;
        nextSpecial = specialRegex.exec(text2);
        if (nextSpecial == null || allowedSpecialSet.has(nextSpecial[0]))
          break;
        startFind = nextSpecial.index + 1;
      }
      const end = (_a = nextSpecial == null ? void 0 : nextSpecial.index) != null ? _a : text2.length;
      for (const match of text2.substring(start, end).matchAll(regexes)) {
        const piece = this.textEncoder.encode(match[0]);
        const token2 = this.rankMap.get(piece.join(","));
        if (token2 != null) {
          ret.push(token2);
          continue;
        }
        ret.push(...bytePairEncode(piece, this.rankMap));
      }
      if (nextSpecial == null)
        break;
      let token = this.specialTokens[nextSpecial[0]];
      ret.push(token);
      start = nextSpecial.index + nextSpecial[0].length;
    }
    return ret;
  }
  decode(tokens) {
    var _a;
    const res = [];
    let length = 0;
    for (let i2 = 0; i2 < tokens.length; ++i2) {
      const token = tokens[i2];
      const bytes = (_a = this.textMap.get(token)) != null ? _a : this.inverseSpecialTokens[token];
      if (bytes != null) {
        res.push(bytes);
        length += bytes.length;
      }
    }
    const mergedArray = new Uint8Array(length);
    let i = 0;
    for (const bytes of res) {
      mergedArray.set(bytes, i);
      i += bytes.length;
    }
    return this.textDecoder.decode(mergedArray);
  }
};
var Tiktoken = _Tiktoken;
__publicField2(Tiktoken, "specialTokenRegex", (tokens) => {
  return new RegExp(tokens.map((i) => escapeRegex(i)).join("|"), "g");
});
function getEncodingNameForModel(model) {
  switch (model) {
    case "gpt2": {
      return "gpt2";
    }
    case "code-cushman-001":
    case "code-cushman-002":
    case "code-davinci-001":
    case "code-davinci-002":
    case "cushman-codex":
    case "davinci-codex":
    case "text-davinci-002":
    case "text-davinci-003": {
      return "p50k_base";
    }
    case "code-davinci-edit-001":
    case "text-davinci-edit-001": {
      return "p50k_edit";
    }
    case "ada":
    case "babbage":
    case "code-search-ada-code-001":
    case "code-search-babbage-code-001":
    case "curie":
    case "davinci":
    case "text-ada-001":
    case "text-babbage-001":
    case "text-curie-001":
    case "text-davinci-001":
    case "text-search-ada-doc-001":
    case "text-search-babbage-doc-001":
    case "text-search-curie-doc-001":
    case "text-search-davinci-doc-001":
    case "text-similarity-ada-001":
    case "text-similarity-babbage-001":
    case "text-similarity-curie-001":
    case "text-similarity-davinci-001": {
      return "r50k_base";
    }
    case "gpt-3.5-turbo-0301":
    case "gpt-3.5-turbo":
    case "gpt-4-0314":
    case "gpt-4-32k-0314":
    case "gpt-4-32k":
    case "gpt-4":
    case "text-embedding-ada-002": {
      return "cl100k_base";
    }
    default:
      throw new Error("Unknown model");
  }
}
const cache = {};
const caller = /* @__PURE__ */ new AsyncCaller({});
async function getEncoding(encoding, options2) {
  if (!(encoding in cache)) {
    cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`, {
      signal: options2 == null ? void 0 : options2.signal
    }).then((res) => res.json()).catch((e) => {
      delete cache[encoding];
      throw e;
    });
  }
  return new Tiktoken(await cache[encoding], options2 == null ? void 0 : options2.extendedSpecialTokens);
}
async function encodingForModel(model, options2) {
  return getEncoding(getEncodingNameForModel(model), options2);
}
const getModelNameForTiktoken = (modelName) => {
  if (modelName.startsWith("gpt-3.5-turbo-")) {
    return "gpt-3.5-turbo";
  }
  if (modelName.startsWith("gpt-4-32k-")) {
    return "gpt-4-32k";
  }
  if (modelName.startsWith("gpt-4-")) {
    return "gpt-4";
  }
  return modelName;
};
const getModelContextSize = (modelName) => {
  switch (getModelNameForTiktoken(modelName)) {
    case "gpt-3.5-turbo":
      return 4096;
    case "gpt-4-32k":
      return 32768;
    case "gpt-4":
      return 8192;
    case "text-davinci-003":
      return 4097;
    case "text-curie-001":
      return 2048;
    case "text-babbage-001":
      return 2048;
    case "text-ada-001":
      return 2048;
    case "code-davinci-002":
      return 8e3;
    case "code-cushman-001":
      return 2048;
    default:
      return 4097;
  }
};
const calculateMaxTokens = async ({ prompt, modelName }) => {
  let numTokens = Math.ceil(prompt.length / 4);
  try {
    numTokens = (await encodingForModel(modelName)).encode(prompt).length;
  } catch (error) {
    console.warn("Failed to calculate number of tokens, falling back to approximate count");
  }
  const maxTokens = getModelContextSize(modelName);
  return maxTokens - numTokens;
};
const getVerbosity = () => false;
class BaseLangChain {
  constructor(params) {
    var _a;
    Object.defineProperty(this, "verbose", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "callbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.verbose = (_a = params.verbose) != null ? _a : getVerbosity();
    this.callbacks = params.callbacks;
  }
}
class BaseLanguageModel extends BaseLangChain {
  get callKeys() {
    return ["stop", "timeout", "signal"];
  }
  constructor(params) {
    var _a;
    super({
      verbose: params.verbose,
      callbacks: (_a = params.callbacks) != null ? _a : params.callbackManager
    });
    Object.defineProperty(this, "caller", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_encoding", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.caller = new AsyncCaller(params != null ? params : {});
  }
  async getNumTokens(text2) {
    let numTokens = Math.ceil(text2.length / 4);
    if (!this._encoding) {
      try {
        this._encoding = await encodingForModel("modelName" in this ? getModelNameForTiktoken(this.modelName) : "gpt2");
      } catch (error) {
        console.warn("Failed to calculate number of tokens, falling back to approximate count", error);
      }
    }
    if (this._encoding) {
      numTokens = this._encoding.encode(text2).length;
    }
    return numTokens;
  }
  _identifyingParams() {
    return {};
  }
  serialize() {
    return {
      ...this._identifyingParams(),
      _type: this._llmType(),
      _model: this._modelType()
    };
  }
  static async deserialize(data2) {
    const { _type, _model, ...rest } = data2;
    if (_model && _model !== "base_chat_model") {
      throw new Error(`Cannot load LLM with model ${_model}`);
    }
    const Cls = {
      openai: (await Promise.resolve().then(() => require("./openai.df6d8947.js"))).ChatOpenAI
    }[_type];
    if (Cls === void 0) {
      throw new Error(`Cannot load  LLM with type ${_type}`);
    }
    return new Cls(rest);
  }
}
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
const byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
const randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
const native = {
  randomUUID
};
function v4(options2, buf, offset) {
  if (native.randomUUID && !buf && !options2) {
    return native.randomUUID();
  }
  options2 = options2 || {};
  const rnds = options2.random || (options2.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
class BaseCallbackHandlerMethodsClass {
}
class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {
  constructor(input) {
    var _a, _b, _c;
    super();
    Object.defineProperty(this, "ignoreLLM", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "ignoreChain", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "ignoreAgent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    if (input) {
      this.ignoreLLM = (_a = input.ignoreLLM) != null ? _a : this.ignoreLLM;
      this.ignoreChain = (_b = input.ignoreChain) != null ? _b : this.ignoreChain;
      this.ignoreAgent = (_c = input.ignoreAgent) != null ? _c : this.ignoreAgent;
    }
  }
  copy() {
    return new this.constructor(this);
  }
  static fromMethods(methods) {
    class Handler extends BaseCallbackHandler {
      constructor() {
        super();
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: v4()
        });
        Object.assign(this, methods);
      }
    }
    return new Handler();
  }
}
var ansiStyles = { exports: {} };
(function(module2) {
  const ANSI_BACKGROUND_OFFSET = 10;
  const wrapAnsi256 = (offset = 0) => (code2) => `\x1B[${38 + offset};5;${code2}m`;
  const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
  function assembleStyles() {
    const codes = /* @__PURE__ */ new Map();
    const styles2 = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        overline: [53, 55],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles2.color.gray = styles2.color.blackBright;
    styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright;
    styles2.color.grey = styles2.color.blackBright;
    styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles2)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles2[styleName] = {
          open: `\x1B[${style[0]}m`,
          close: `\x1B[${style[1]}m`
        };
        group[styleName] = styles2[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles2, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles2, "codes", {
      value: codes,
      enumerable: false
    });
    styles2.color.close = "\x1B[39m";
    styles2.bgColor.close = "\x1B[49m";
    styles2.color.ansi256 = wrapAnsi256();
    styles2.color.ansi16m = wrapAnsi16m();
    styles2.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
    styles2.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
    Object.defineProperties(styles2, {
      rgbToAnsi256: {
        value: (red, green, blue) => {
          if (red === green && green === blue) {
            if (red < 8) {
              return 16;
            }
            if (red > 248) {
              return 231;
            }
            return Math.round((red - 8) / 247 * 24) + 232;
          }
          return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
        },
        enumerable: false
      },
      hexToRgb: {
        value: (hex) => {
          const matches = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
          if (!matches) {
            return [0, 0, 0];
          }
          let { colorString } = matches.groups;
          if (colorString.length === 3) {
            colorString = colorString.split("").map((character) => character + character).join("");
          }
          const integer = Number.parseInt(colorString, 16);
          return [
            integer >> 16 & 255,
            integer >> 8 & 255,
            integer & 255
          ];
        },
        enumerable: false
      },
      hexToAnsi256: {
        value: (hex) => styles2.rgbToAnsi256(...styles2.hexToRgb(hex)),
        enumerable: false
      }
    });
    return styles2;
  }
  Object.defineProperty(module2, "exports", {
    enumerable: true,
    get: assembleStyles
  });
})(ansiStyles);
const styles = ansiStyles.exports;
class BaseTracer extends BaseCallbackHandler {
  constructor() {
    super();
    Object.defineProperty(this, "runMap", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /* @__PURE__ */ new Map()
    });
  }
  copy() {
    return this;
  }
  _addChildRun(parentRun, childRun) {
    parentRun.child_runs.push(childRun);
  }
  _startTrace(run2) {
    if (run2.parent_run_id !== void 0) {
      const parentRun = this.runMap.get(run2.parent_run_id);
      if (parentRun) {
        this._addChildRun(parentRun, run2);
      }
    }
    this.runMap.set(run2.id, run2);
  }
  async _endTrace(run2) {
    const parentRun = run2.parent_run_id !== void 0 && this.runMap.get(run2.parent_run_id);
    if (parentRun) {
      parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run2.child_execution_order);
    } else {
      await this.persistRun(run2);
    }
    this.runMap.delete(run2.id);
  }
  _getExecutionOrder(parentRunId) {
    const parentRun = parentRunId !== void 0 && this.runMap.get(parentRunId);
    if (!parentRun) {
      return 1;
    }
    return parentRun.child_execution_order + 1;
  }
  async handleLLMStart(llm, prompts, runId, parentRunId, extraParams) {
    var _a;
    const execution_order = this._getExecutionOrder(parentRunId);
    const run2 = {
      id: runId,
      name: llm.name,
      parent_run_id: parentRunId,
      start_time: Date.now(),
      serialized: llm,
      inputs: { prompts },
      execution_order,
      child_runs: [],
      child_execution_order: execution_order,
      run_type: "llm",
      extra: extraParams
    };
    this._startTrace(run2);
    await ((_a = this.onLLMStart) == null ? void 0 : _a.call(this, run2));
  }
  async handleChatModelStart(llm, messages, runId, parentRunId, extraParams) {
    var _a;
    const execution_order = this._getExecutionOrder(parentRunId);
    const run2 = {
      id: runId,
      name: llm.name,
      parent_run_id: parentRunId,
      start_time: Date.now(),
      serialized: llm,
      inputs: { messages },
      execution_order,
      child_runs: [],
      child_execution_order: execution_order,
      run_type: "llm",
      extra: extraParams
    };
    this._startTrace(run2);
    await ((_a = this.onLLMStart) == null ? void 0 : _a.call(this, run2));
  }
  async handleLLMEnd(output, runId) {
    var _a;
    const run2 = this.runMap.get(runId);
    if (!run2 || (run2 == null ? void 0 : run2.run_type) !== "llm") {
      throw new Error("No LLM run to end.");
    }
    run2.end_time = Date.now();
    run2.outputs = output;
    await ((_a = this.onLLMEnd) == null ? void 0 : _a.call(this, run2));
    await this._endTrace(run2);
  }
  async handleLLMError(error, runId) {
    var _a;
    const run2 = this.runMap.get(runId);
    if (!run2 || (run2 == null ? void 0 : run2.run_type) !== "llm") {
      throw new Error("No LLM run to end.");
    }
    run2.end_time = Date.now();
    run2.error = error.message;
    await ((_a = this.onLLMError) == null ? void 0 : _a.call(this, run2));
    await this._endTrace(run2);
  }
  async handleChainStart(chain, inputs, runId, parentRunId) {
    var _a;
    const execution_order = this._getExecutionOrder(parentRunId);
    const run2 = {
      id: runId,
      name: chain.name,
      parent_run_id: parentRunId,
      start_time: Date.now(),
      serialized: chain,
      inputs,
      execution_order,
      child_execution_order: execution_order,
      run_type: "chain",
      child_runs: []
    };
    this._startTrace(run2);
    await ((_a = this.onChainStart) == null ? void 0 : _a.call(this, run2));
  }
  async handleChainEnd(outputs, runId) {
    var _a;
    const run2 = this.runMap.get(runId);
    if (!run2 || (run2 == null ? void 0 : run2.run_type) !== "chain") {
      throw new Error("No chain run to end.");
    }
    run2.end_time = Date.now();
    run2.outputs = outputs;
    await ((_a = this.onChainEnd) == null ? void 0 : _a.call(this, run2));
    await this._endTrace(run2);
  }
  async handleChainError(error, runId) {
    var _a;
    const run2 = this.runMap.get(runId);
    if (!run2 || (run2 == null ? void 0 : run2.run_type) !== "chain") {
      throw new Error("No chain run to end.");
    }
    run2.end_time = Date.now();
    run2.error = error.message;
    await ((_a = this.onChainError) == null ? void 0 : _a.call(this, run2));
    await this._endTrace(run2);
  }
  async handleToolStart(tool, input, runId, parentRunId) {
    var _a;
    const execution_order = this._getExecutionOrder(parentRunId);
    const run2 = {
      id: runId,
      name: tool.name,
      parent_run_id: parentRunId,
      start_time: Date.now(),
      serialized: tool,
      inputs: { input },
      execution_order,
      child_execution_order: execution_order,
      run_type: "tool",
      child_runs: []
    };
    this._startTrace(run2);
    await ((_a = this.onToolStart) == null ? void 0 : _a.call(this, run2));
  }
  async handleToolEnd(output, runId) {
    var _a;
    const run2 = this.runMap.get(runId);
    if (!run2 || (run2 == null ? void 0 : run2.run_type) !== "tool") {
      throw new Error("No tool run to end");
    }
    run2.end_time = Date.now();
    run2.outputs = { output };
    await ((_a = this.onToolEnd) == null ? void 0 : _a.call(this, run2));
    await this._endTrace(run2);
  }
  async handleToolError(error, runId) {
    var _a;
    const run2 = this.runMap.get(runId);
    if (!run2 || (run2 == null ? void 0 : run2.run_type) !== "tool") {
      throw new Error("No tool run to end");
    }
    run2.end_time = Date.now();
    run2.error = error.message;
    await ((_a = this.onToolError) == null ? void 0 : _a.call(this, run2));
    await this._endTrace(run2);
  }
  async handleAgentAction(action, runId) {
    var _a;
    const run2 = this.runMap.get(runId);
    if (!run2 || (run2 == null ? void 0 : run2.run_type) !== "chain") {
      return;
    }
    const agentRun = run2;
    agentRun.actions = agentRun.actions || [];
    agentRun.actions.push(action);
    await ((_a = this.onAgentAction) == null ? void 0 : _a.call(this, run2));
  }
}
function wrap(style, text2) {
  return `${style.open}${text2}${style.close}`;
}
function tryJsonStringify(obj, fallback) {
  try {
    return JSON.stringify(obj, null, 2);
  } catch (err) {
    return fallback;
  }
}
function elapsed(run2) {
  if (!run2.end_time)
    return "";
  const elapsed2 = run2.end_time - run2.start_time;
  if (elapsed2 < 1e3) {
    return `${elapsed2}ms`;
  }
  return `${(elapsed2 / 1e3).toFixed(2)}s`;
}
const { color } = styles;
class ConsoleCallbackHandler extends BaseTracer {
  constructor() {
    super(...arguments);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "console_callback_handler"
    });
  }
  persistRun(_run) {
    return Promise.resolve();
  }
  getParents(run2) {
    const parents = [];
    let currentRun = run2;
    while (currentRun.parent_run_id) {
      const parent = this.runMap.get(currentRun.parent_run_id);
      if (parent) {
        parents.push(parent);
        currentRun = parent;
      } else {
        break;
      }
    }
    return parents;
  }
  getBreadcrumbs(run2) {
    const parents = this.getParents(run2).reverse();
    const string = [...parents, run2].map((parent, i, arr) => {
      const name2 = `${parent.execution_order}:${parent.run_type}:${parent.name}`;
      return i === arr.length - 1 ? wrap(styles.bold, name2) : name2;
    }).join(" > ");
    return wrap(color.grey, string);
  }
  onChainStart(run2) {
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.green, "[chain/start]")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run2.inputs, "[inputs]")}`);
  }
  onChainEnd(run2) {
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.cyan, "[chain/end]")} [${crumbs}] [${elapsed(run2)}] Exiting Chain run with output: ${tryJsonStringify(run2.outputs, "[outputs]")}`);
  }
  onChainError(run2) {
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.red, "[chain/error]")} [${crumbs}] [${elapsed(run2)}] Chain run errored with error: ${tryJsonStringify(run2.error, "[error]")}`);
  }
  onLLMStart(run2) {
    const crumbs = this.getBreadcrumbs(run2);
    const inputs = "prompts" in run2.inputs ? { prompts: run2.inputs.prompts.map((p) => p.trim()) } : run2.inputs;
    console.log(`${wrap(color.green, "[llm/start]")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, "[inputs]")}`);
  }
  onLLMEnd(run2) {
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.cyan, "[llm/end]")} [${crumbs}] [${elapsed(run2)}] Exiting LLM run with output: ${tryJsonStringify(run2.outputs, "[response]")}`);
  }
  onLLMError(run2) {
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.red, "[llm/error]")} [${crumbs}] [${elapsed(run2)}] LLM run errored with error: ${tryJsonStringify(run2.error, "[error]")}`);
  }
  onToolStart(run2) {
    var _a;
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.green, "[tool/start]")} [${crumbs}] Entering Tool run with input: "${(_a = run2.inputs.input) == null ? void 0 : _a.trim()}"`);
  }
  onToolEnd(run2) {
    var _a, _b;
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.cyan, "[tool/end]")} [${crumbs}] [${elapsed(run2)}] Exiting Tool run with output: "${(_b = (_a = run2.outputs) == null ? void 0 : _a.output) == null ? void 0 : _b.trim()}"`);
  }
  onToolError(run2) {
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.red, "[tool/error]")} [${crumbs}] [${elapsed(run2)}] Tool run errored with error: ${tryJsonStringify(run2.error, "[error]")}`);
  }
  onAgentAction(run2) {
    const agentRun = run2;
    const crumbs = this.getBreadcrumbs(run2);
    console.log(`${wrap(color.blue, "[agent/action]")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], "[action]")}`);
  }
}
class LangChainTracer extends BaseTracer {
  constructor({ exampleId, sessionName, callerParams, timeout } = {}) {
    super();
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "langchain_tracer"
    });
    Object.defineProperty(this, "endpoint", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: getEnvironmentVariable("LANGCHAIN_ENDPOINT") || "http://localhost:1984"
    });
    Object.defineProperty(this, "headers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {
        "Content-Type": "application/json"
      }
    });
    Object.defineProperty(this, "sessionName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "exampleId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "caller", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "timeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5e3
    });
    const apiKey = getEnvironmentVariable("LANGCHAIN_API_KEY");
    if (apiKey) {
      this.headers["x-api-key"] = apiKey;
    }
    this.sessionName = sessionName != null ? sessionName : getEnvironmentVariable("LANGCHAIN_SESSION");
    this.exampleId = exampleId;
    this.timeout = timeout != null ? timeout : this.timeout;
    this.caller = new AsyncCaller(callerParams != null ? callerParams : { maxRetries: 2 });
  }
  async _convertToCreate(run2, example_id = void 0) {
    var _a, _b;
    const runExtra = (_a = run2.extra) != null ? _a : {};
    runExtra.runtime = await getRuntimeEnvironment();
    const persistedRun = {
      id: run2.id,
      name: run2.name,
      start_time: run2.start_time,
      end_time: run2.end_time,
      run_type: run2.run_type,
      reference_example_id: run2.parent_run_id ? void 0 : example_id,
      extra: runExtra,
      parent_run_id: run2.parent_run_id,
      execution_order: run2.execution_order,
      serialized: run2.serialized,
      error: run2.error,
      inputs: run2.inputs,
      outputs: (_b = run2.outputs) != null ? _b : {},
      session_name: this.sessionName,
      child_runs: []
    };
    return persistedRun;
  }
  async persistRun(_run) {
  }
  async _persistRunSingle(run2) {
    const persistedRun = await this._convertToCreate(run2, this.exampleId);
    const endpoint = `${this.endpoint}/runs`;
    const response = await this.caller.call(fetch, endpoint, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(persistedRun),
      signal: AbortSignal.timeout(this.timeout)
    });
    const body = await response.text();
    if (!response.ok) {
      throw new Error(`Failed to persist run: ${response.status} ${response.statusText} ${body}`);
    }
  }
  async _updateRunSingle(run2) {
    const runUpdate = {
      end_time: run2.end_time,
      error: run2.error,
      outputs: run2.outputs,
      parent_run_id: run2.parent_run_id,
      reference_example_id: run2.reference_example_id
    };
    const endpoint = `${this.endpoint}/runs/${run2.id}`;
    const response = await this.caller.call(fetch, endpoint, {
      method: "PATCH",
      headers: this.headers,
      body: JSON.stringify(runUpdate),
      signal: AbortSignal.timeout(this.timeout)
    });
    const body = await response.text();
    if (!response.ok) {
      throw new Error(`Failed to update run: ${response.status} ${response.statusText} ${body}`);
    }
  }
  async onLLMStart(run2) {
    await this._persistRunSingle(run2);
  }
  async onLLMEnd(run2) {
    await this._updateRunSingle(run2);
  }
  async onLLMError(run2) {
    await this._updateRunSingle(run2);
  }
  async onChainStart(run2) {
    await this._persistRunSingle(run2);
  }
  async onChainEnd(run2) {
    await this._updateRunSingle(run2);
  }
  async onChainError(run2) {
    await this._updateRunSingle(run2);
  }
  async onToolStart(run2) {
    await this._persistRunSingle(run2);
  }
  async onToolEnd(run2) {
    await this._updateRunSingle(run2);
  }
  async onToolError(run2) {
    await this._updateRunSingle(run2);
  }
}
function getBufferString(messages, humanPrefix = "Human", aiPrefix = "AI") {
  const string_messages = [];
  for (const m of messages) {
    let role;
    if (m._getType() === "human") {
      role = humanPrefix;
    } else if (m._getType() === "ai") {
      role = aiPrefix;
    } else if (m._getType() === "system") {
      role = "System";
    } else if (m._getType() === "generic") {
      role = m.role;
    } else {
      throw new Error(`Got unsupported message type: ${m}`);
    }
    string_messages.push(`${role}: ${m.text}`);
  }
  return string_messages.join("\n");
}
class LangChainTracerV1 extends BaseTracer {
  constructor() {
    super();
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "langchain_tracer"
    });
    Object.defineProperty(this, "endpoint", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: getEnvironmentVariable("LANGCHAIN_ENDPOINT") || "http://localhost:1984"
    });
    Object.defineProperty(this, "headers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {
        "Content-Type": "application/json"
      }
    });
    Object.defineProperty(this, "session", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    const apiKey = getEnvironmentVariable("LANGCHAIN_API_KEY");
    if (apiKey) {
      this.headers["x-api-key"] = apiKey;
    }
  }
  async newSession(sessionName) {
    const sessionCreate = {
      start_time: Date.now(),
      name: sessionName
    };
    const session = await this.persistSession(sessionCreate);
    this.session = session;
    return session;
  }
  async loadSession(sessionName) {
    const endpoint = `${this.endpoint}/sessions?name=${sessionName}`;
    return this._handleSessionResponse(endpoint);
  }
  async loadDefaultSession() {
    const endpoint = `${this.endpoint}/sessions?name=default`;
    return this._handleSessionResponse(endpoint);
  }
  async convertV2RunToRun(run2) {
    var _a, _b;
    const session = (_a = this.session) != null ? _a : await this.loadDefaultSession();
    const serialized = run2.serialized;
    let runResult;
    if (run2.run_type === "llm") {
      const prompts = run2.inputs.prompts ? run2.inputs.prompts : run2.inputs.messages.map((x) => getBufferString(x));
      const llmRun = {
        uuid: run2.id,
        start_time: run2.start_time,
        end_time: run2.end_time,
        execution_order: run2.execution_order,
        child_execution_order: run2.child_execution_order,
        serialized,
        type: run2.run_type,
        session_id: session.id,
        prompts,
        response: run2.outputs
      };
      runResult = llmRun;
    } else if (run2.run_type === "chain") {
      const child_runs = await Promise.all(run2.child_runs.map((child_run) => this.convertV2RunToRun(child_run)));
      const chainRun = {
        uuid: run2.id,
        start_time: run2.start_time,
        end_time: run2.end_time,
        execution_order: run2.execution_order,
        child_execution_order: run2.child_execution_order,
        serialized,
        type: run2.run_type,
        session_id: session.id,
        inputs: run2.inputs,
        outputs: run2.outputs,
        child_llm_runs: child_runs.filter((child_run) => child_run.type === "llm"),
        child_chain_runs: child_runs.filter((child_run) => child_run.type === "chain"),
        child_tool_runs: child_runs.filter((child_run) => child_run.type === "tool")
      };
      runResult = chainRun;
    } else if (run2.run_type === "tool") {
      const child_runs = await Promise.all(run2.child_runs.map((child_run) => this.convertV2RunToRun(child_run)));
      const toolRun = {
        uuid: run2.id,
        start_time: run2.start_time,
        end_time: run2.end_time,
        execution_order: run2.execution_order,
        child_execution_order: run2.child_execution_order,
        serialized,
        type: run2.run_type,
        session_id: session.id,
        tool_input: run2.inputs.input,
        output: (_b = run2.outputs) == null ? void 0 : _b.output,
        action: JSON.stringify(serialized),
        child_llm_runs: child_runs.filter((child_run) => child_run.type === "llm"),
        child_chain_runs: child_runs.filter((child_run) => child_run.type === "chain"),
        child_tool_runs: child_runs.filter((child_run) => child_run.type === "tool")
      };
      runResult = toolRun;
    } else {
      throw new Error(`Unknown run type: ${run2.run_type}`);
    }
    return runResult;
  }
  async persistRun(run2) {
    let endpoint;
    let v1Run;
    if (run2.run_type !== void 0) {
      v1Run = await this.convertV2RunToRun(run2);
    } else {
      v1Run = run2;
    }
    if (v1Run.type === "llm") {
      endpoint = `${this.endpoint}/llm-runs`;
    } else if (v1Run.type === "chain") {
      endpoint = `${this.endpoint}/chain-runs`;
    } else {
      endpoint = `${this.endpoint}/tool-runs`;
    }
    const response = await fetch(endpoint, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(v1Run)
    });
    if (!response.ok) {
      console.error(`Failed to persist run: ${response.status} ${response.statusText}`);
    }
  }
  async persistSession(sessionCreate) {
    const endpoint = `${this.endpoint}/sessions`;
    const response = await fetch(endpoint, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(sessionCreate)
    });
    if (!response.ok) {
      console.error(`Failed to persist session: ${response.status} ${response.statusText}, using default session.`);
      return {
        id: 1,
        ...sessionCreate
      };
    }
    return {
      id: (await response.json()).id,
      ...sessionCreate
    };
  }
  async _handleSessionResponse(endpoint) {
    const response = await fetch(endpoint, {
      method: "GET",
      headers: this.headers
    });
    let tracerSession;
    if (!response.ok) {
      console.error(`Failed to load session: ${response.status} ${response.statusText}`);
      tracerSession = {
        id: 1,
        start_time: Date.now()
      };
      this.session = tracerSession;
      return tracerSession;
    }
    const resp = await response.json();
    if (resp.length === 0) {
      tracerSession = {
        id: 1,
        start_time: Date.now()
      };
      this.session = tracerSession;
      return tracerSession;
    }
    [tracerSession] = resp;
    this.session = tracerSession;
    return tracerSession;
  }
}
async function getTracingCallbackHandler(session) {
  const tracer = new LangChainTracerV1();
  if (session) {
    await tracer.loadSession(session);
  } else {
    await tracer.loadDefaultSession();
  }
  return tracer;
}
async function getTracingV2CallbackHandler() {
  return new LangChainTracer();
}
class BaseCallbackManager {
  setHandler(handler) {
    return this.setHandlers([handler]);
  }
}
class BaseRunManager {
  constructor(runId, handlers, inheritableHandlers, _parentRunId) {
    Object.defineProperty(this, "runId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: runId
    });
    Object.defineProperty(this, "handlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: handlers
    });
    Object.defineProperty(this, "inheritableHandlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: inheritableHandlers
    });
    Object.defineProperty(this, "_parentRunId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _parentRunId
    });
  }
  async handleText(text2) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      try {
        await ((_a = handler.handleText) == null ? void 0 : _a.call(handler, text2, this.runId, this._parentRunId));
      } catch (err) {
        console.error(`Error in handler ${handler.constructor.name}, handleText: ${err}`);
      }
    }));
  }
}
class CallbackManagerForLLMRun extends BaseRunManager {
  async handleLLMNewToken(token) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreLLM) {
        try {
          await ((_a = handler.handleLLMNewToken) == null ? void 0 : _a.call(handler, token, this.runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);
        }
      }
    }));
  }
  async handleLLMError(err) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreLLM) {
        try {
          await ((_a = handler.handleLLMError) == null ? void 0 : _a.call(handler, err, this.runId, this._parentRunId));
        } catch (err2) {
          console.error(`Error in handler ${handler.constructor.name}, handleLLMError: ${err2}`);
        }
      }
    }));
  }
  async handleLLMEnd(output) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreLLM) {
        try {
          await ((_a = handler.handleLLMEnd) == null ? void 0 : _a.call(handler, output, this.runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);
        }
      }
    }));
  }
}
class CallbackManagerForChainRun extends BaseRunManager {
  getChild() {
    const manager = new CallbackManager(this.runId);
    manager.setHandlers(this.inheritableHandlers);
    return manager;
  }
  async handleChainError(err) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreChain) {
        try {
          await ((_a = handler.handleChainError) == null ? void 0 : _a.call(handler, err, this.runId, this._parentRunId));
        } catch (err2) {
          console.error(`Error in handler ${handler.constructor.name}, handleChainError: ${err2}`);
        }
      }
    }));
  }
  async handleChainEnd(output) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreChain) {
        try {
          await ((_a = handler.handleChainEnd) == null ? void 0 : _a.call(handler, output, this.runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);
        }
      }
    }));
  }
  async handleAgentAction(action) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreAgent) {
        try {
          await ((_a = handler.handleAgentAction) == null ? void 0 : _a.call(handler, action, this.runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);
        }
      }
    }));
  }
  async handleAgentEnd(action) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreAgent) {
        try {
          await ((_a = handler.handleAgentEnd) == null ? void 0 : _a.call(handler, action, this.runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);
        }
      }
    }));
  }
}
class CallbackManagerForToolRun extends BaseRunManager {
  getChild() {
    const manager = new CallbackManager(this.runId);
    manager.setHandlers(this.inheritableHandlers);
    return manager;
  }
  async handleToolError(err) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreAgent) {
        try {
          await ((_a = handler.handleToolError) == null ? void 0 : _a.call(handler, err, this.runId, this._parentRunId));
        } catch (err2) {
          console.error(`Error in handler ${handler.constructor.name}, handleToolError: ${err2}`);
        }
      }
    }));
  }
  async handleToolEnd(output) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreAgent) {
        try {
          await ((_a = handler.handleToolEnd) == null ? void 0 : _a.call(handler, output, this.runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);
        }
      }
    }));
  }
}
class CallbackManager extends BaseCallbackManager {
  constructor(parentRunId) {
    super();
    Object.defineProperty(this, "handlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "inheritableHandlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "callback_manager"
    });
    Object.defineProperty(this, "_parentRunId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.handlers = [];
    this.inheritableHandlers = [];
    this._parentRunId = parentRunId;
  }
  async handleLLMStart(llm, prompts, runId = v4(), _parentRunId = void 0, extraParams = void 0) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreLLM) {
        try {
          await ((_a = handler.handleLLMStart) == null ? void 0 : _a.call(handler, llm, prompts, runId, this._parentRunId, extraParams));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);
        }
      }
    }));
    return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this._parentRunId);
  }
  async handleChatModelStart(llm, messages, runId = v4(), _parentRunId = void 0, extraParams = void 0) {
    let messageStrings;
    await Promise.all(this.handlers.map(async (handler) => {
      var _a, _b;
      if (!handler.ignoreLLM) {
        try {
          if (handler.handleChatModelStart)
            await ((_a = handler.handleChatModelStart) == null ? void 0 : _a.call(handler, llm, messages, runId, this._parentRunId, extraParams));
          else if (handler.handleLLMStart) {
            messageStrings = messages.map((x) => getBufferString(x));
            await ((_b = handler.handleLLMStart) == null ? void 0 : _b.call(handler, llm, messageStrings, runId, this._parentRunId, extraParams));
          }
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);
        }
      }
    }));
    return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this._parentRunId);
  }
  async handleChainStart(chain, inputs, runId = v4()) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreChain) {
        try {
          await ((_a = handler.handleChainStart) == null ? void 0 : _a.call(handler, chain, inputs, runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);
        }
      }
    }));
    return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this._parentRunId);
  }
  async handleToolStart(tool, input, runId = v4()) {
    await Promise.all(this.handlers.map(async (handler) => {
      var _a;
      if (!handler.ignoreAgent) {
        try {
          await ((_a = handler.handleToolStart) == null ? void 0 : _a.call(handler, tool, input, runId, this._parentRunId));
        } catch (err) {
          console.error(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);
        }
      }
    }));
    return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this._parentRunId);
  }
  addHandler(handler, inherit = true) {
    this.handlers.push(handler);
    if (inherit) {
      this.inheritableHandlers.push(handler);
    }
  }
  removeHandler(handler) {
    this.handlers = this.handlers.filter((_handler) => _handler !== handler);
    this.inheritableHandlers = this.inheritableHandlers.filter((_handler) => _handler !== handler);
  }
  setHandlers(handlers, inherit = true) {
    this.handlers = [];
    this.inheritableHandlers = [];
    for (const handler of handlers) {
      this.addHandler(handler, inherit);
    }
  }
  copy(additionalHandlers = [], inherit = true) {
    const manager = new CallbackManager(this._parentRunId);
    for (const handler of this.handlers) {
      const inheritable = this.inheritableHandlers.includes(handler);
      manager.addHandler(handler, inheritable);
    }
    for (const handler of additionalHandlers) {
      if (manager.handlers.filter((h) => h.name === "console_callback_handler").some((h) => h.name === handler.name)) {
        continue;
      }
      manager.addHandler(handler, inherit);
    }
    return manager;
  }
  static fromHandlers(handlers) {
    class Handler extends BaseCallbackHandler {
      constructor() {
        super();
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: v4()
        });
        Object.assign(this, handlers);
      }
    }
    const manager = new this();
    manager.addHandler(new Handler());
    return manager;
  }
  static async configure(inheritableHandlers, localHandlers, options2) {
    var _a, _b, _c;
    let callbackManager;
    if (inheritableHandlers || localHandlers) {
      if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {
        callbackManager = new CallbackManager();
        callbackManager.setHandlers((_a = inheritableHandlers == null ? void 0 : inheritableHandlers.map(ensureHandler)) != null ? _a : [], true);
      } else {
        callbackManager = inheritableHandlers;
      }
      callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers == null ? void 0 : localHandlers.handlers, false);
    }
    const verboseEnabled = getEnvironmentVariable("LANGCHAIN_VERBOSE") || (options2 == null ? void 0 : options2.verbose);
    const tracingV2Enabled = (_b = getEnvironmentVariable("LANGCHAIN_TRACING_V2")) != null ? _b : false;
    const tracingEnabled = tracingV2Enabled || ((_c = getEnvironmentVariable("LANGCHAIN_TRACING")) != null ? _c : false);
    if (verboseEnabled || tracingEnabled) {
      if (!callbackManager) {
        callbackManager = new CallbackManager();
      }
      if (verboseEnabled && !callbackManager.handlers.some((handler) => handler.name === ConsoleCallbackHandler.prototype.name)) {
        const consoleHandler = new ConsoleCallbackHandler();
        callbackManager.addHandler(consoleHandler, true);
      }
      if (tracingEnabled && !callbackManager.handlers.some((handler) => handler.name === "langchain_tracer")) {
        if (tracingV2Enabled) {
          callbackManager.addHandler(await getTracingV2CallbackHandler(), true);
        } else {
          const session = getEnvironmentVariable("LANGCHAIN_SESSION");
          callbackManager.addHandler(await getTracingCallbackHandler(session), true);
        }
      }
    }
    return callbackManager;
  }
}
function ensureHandler(handler) {
  if ("name" in handler) {
    return handler;
  }
  return BaseCallbackHandler.fromMethods(handler);
}
class BaseLLM extends BaseLanguageModel {
  constructor({ cache: cache2, concurrency, ...rest }) {
    super(concurrency ? { maxConcurrency: concurrency, ...rest } : rest);
    Object.defineProperty(this, "cache", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    if (typeof cache2 === "object") {
      this.cache = cache2;
    } else if (cache2) {
      this.cache = InMemoryCache.global();
    } else {
      this.cache = void 0;
    }
  }
  async generatePrompt(promptValues, options2, callbacks) {
    const prompts = promptValues.map((promptValue) => promptValue.toString());
    return this.generate(prompts, options2, callbacks);
  }
  invocationParams() {
    return {};
  }
  async _generateUncached(prompts, options2, callbacks) {
    const callbackManager_ = await CallbackManager.configure(callbacks, this.callbacks, { verbose: this.verbose });
    const invocationParams = { invocation_params: this == null ? void 0 : this.invocationParams() };
    const runManager = await (callbackManager_ == null ? void 0 : callbackManager_.handleLLMStart({ name: this._llmType() }, prompts, void 0, void 0, invocationParams));
    let output;
    try {
      output = await this._generate(prompts, options2, runManager);
    } catch (err) {
      await (runManager == null ? void 0 : runManager.handleLLMError(err));
      throw err;
    }
    await (runManager == null ? void 0 : runManager.handleLLMEnd(output));
    Object.defineProperty(output, RUN_KEY, {
      value: runManager ? { runId: runManager == null ? void 0 : runManager.runId } : void 0,
      configurable: true
    });
    return output;
  }
  async generate(prompts, options2, callbacks) {
    var _a, _b;
    if (!Array.isArray(prompts)) {
      throw new Error("Argument 'prompts' is expected to be a string[]");
    }
    let parsedOptions;
    if (Array.isArray(options2)) {
      parsedOptions = { stop: options2 };
    } else if ((options2 == null ? void 0 : options2.timeout) && !options2.signal) {
      parsedOptions = {
        ...options2,
        signal: AbortSignal.timeout(options2.timeout)
      };
    } else {
      parsedOptions = options2 != null ? options2 : {};
    }
    if (!this.cache) {
      return this._generateUncached(prompts, parsedOptions, callbacks);
    }
    const { cache: cache2 } = this;
    const params = this.serialize();
    params.stop = (_a = parsedOptions.stop) != null ? _a : params.stop;
    const llmStringKey = `${Object.entries(params).sort()}`;
    const missingPromptIndices = [];
    const generations = await Promise.all(prompts.map(async (prompt, index) => {
      const result = await cache2.lookup(prompt, llmStringKey);
      if (!result) {
        missingPromptIndices.push(index);
      }
      return result;
    }));
    let llmOutput = {};
    if (missingPromptIndices.length > 0) {
      const results = await this._generateUncached(missingPromptIndices.map((i) => prompts[i]), parsedOptions, callbacks);
      await Promise.all(results.generations.map(async (generation, index) => {
        const promptIndex = missingPromptIndices[index];
        generations[promptIndex] = generation;
        return cache2.update(prompts[promptIndex], llmStringKey, generation);
      }));
      llmOutput = (_b = results.llmOutput) != null ? _b : {};
    }
    return { generations, llmOutput };
  }
  async call(prompt, options2, callbacks) {
    const { generations } = await this.generate([prompt], options2 != null ? options2 : {}, callbacks);
    return generations[0][0].text;
  }
  async predict(text2, options2, callbacks) {
    return this.call(text2, options2, callbacks);
  }
  async predictMessages(messages, options2, callbacks) {
    const text2 = getBufferString(messages);
    const prediction = await this.call(text2, options2, callbacks);
    return new AIChatMessage(prediction);
  }
  _identifyingParams() {
    return {};
  }
  serialize() {
    return {
      ...this._identifyingParams(),
      _type: this._llmType(),
      _model: this._modelType()
    };
  }
  _modelType() {
    return "base_llm";
  }
  static async deserialize(data2) {
    const { _type, _model, ...rest } = data2;
    if (_model && _model !== "base_llm") {
      throw new Error(`Cannot load LLM with model ${_model}`);
    }
    const Cls = {
      openai: (await Promise.resolve().then(() => openai)).OpenAI
    }[_type];
    if (Cls === void 0) {
      throw new Error(`Cannot load  LLM with type ${_type}`);
    }
    return new Cls(rest);
  }
}
class LLM extends BaseLLM {
  async _generate(prompts, options2, runManager) {
    const generations = await Promise.all(prompts.map((prompt) => this._call(prompt, options2, runManager).then((text2) => [{ text: text2 }])));
    return { generations };
  }
}
const promptLayerTrackRequest = async (callerFunc, functionName, prompt, kwargs, plTags, requestResponse, startTime, endTime, apiKey) => {
  const promptLayerResp = await callerFunc.call(fetch, "https://api.promptlayer.com/track-request", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      function_name: functionName,
      provider: "langchain",
      args: prompt,
      kwargs,
      tags: plTags,
      request_response: requestResponse,
      request_start_time: Math.floor(startTime / 1e3),
      request_end_time: Math.floor(endTime / 1e3),
      api_key: apiKey
    })
  });
  return promptLayerResp.json();
};
class OpenAIChat extends LLM {
  get callKeys() {
    return ["stop", "signal", "timeout", "options"];
  }
  constructor(fields, configuration2) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    super(fields != null ? fields : {});
    Object.defineProperty(this, "temperature", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(this, "topP", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(this, "frequencyPenalty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "presencePenalty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "n", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(this, "logitBias", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maxTokens", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "modelName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "gpt-3.5-turbo"
    });
    Object.defineProperty(this, "prefixMessages", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "modelKwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "timeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stop", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "streaming", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "azureOpenAIApiVersion", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "azureOpenAIApiKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "azureOpenAIApiInstanceName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "azureOpenAIApiDeploymentName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "client", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clientConfig", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    const apiKey = (_a = fields == null ? void 0 : fields.openAIApiKey) != null ? _a : getEnvironmentVariable("OPENAI_API_KEY");
    const azureApiKey = (_b = fields == null ? void 0 : fields.azureOpenAIApiKey) != null ? _b : getEnvironmentVariable("AZURE_OPENAI_API_KEY");
    if (!azureApiKey && !apiKey) {
      throw new Error("(Azure) OpenAI API key not found");
    }
    const azureApiInstanceName = (_c = fields == null ? void 0 : fields.azureOpenAIApiInstanceName) != null ? _c : getEnvironmentVariable("AZURE_OPENAI_API_INSTANCE_NAME");
    const azureApiDeploymentName = (_d = fields == null ? void 0 : fields.azureOpenAIApiDeploymentName) != null ? _d : getEnvironmentVariable("AZURE_OPENAI_API_DEPLOYMENT_NAME");
    const azureApiVersion = (_e = fields == null ? void 0 : fields.azureOpenAIApiVersion) != null ? _e : getEnvironmentVariable("AZURE_OPENAI_API_VERSION");
    this.modelName = (_f = fields == null ? void 0 : fields.modelName) != null ? _f : this.modelName;
    this.prefixMessages = (_g = fields == null ? void 0 : fields.prefixMessages) != null ? _g : this.prefixMessages;
    this.modelKwargs = (_h = fields == null ? void 0 : fields.modelKwargs) != null ? _h : {};
    this.timeout = fields == null ? void 0 : fields.timeout;
    this.temperature = (_i = fields == null ? void 0 : fields.temperature) != null ? _i : this.temperature;
    this.topP = (_j = fields == null ? void 0 : fields.topP) != null ? _j : this.topP;
    this.frequencyPenalty = (_k = fields == null ? void 0 : fields.frequencyPenalty) != null ? _k : this.frequencyPenalty;
    this.presencePenalty = (_l = fields == null ? void 0 : fields.presencePenalty) != null ? _l : this.presencePenalty;
    this.n = (_m = fields == null ? void 0 : fields.n) != null ? _m : this.n;
    this.logitBias = fields == null ? void 0 : fields.logitBias;
    this.maxTokens = fields == null ? void 0 : fields.maxTokens;
    this.stop = fields == null ? void 0 : fields.stop;
    this.streaming = (_n = fields == null ? void 0 : fields.streaming) != null ? _n : false;
    this.azureOpenAIApiVersion = azureApiVersion;
    this.azureOpenAIApiKey = azureApiKey;
    this.azureOpenAIApiInstanceName = azureApiInstanceName;
    this.azureOpenAIApiDeploymentName = azureApiDeploymentName;
    if (this.streaming && this.n > 1) {
      throw new Error("Cannot stream results when n > 1");
    }
    if (this.azureOpenAIApiKey) {
      if (!this.azureOpenAIApiInstanceName) {
        throw new Error("Azure OpenAI API instance name not found");
      }
      if (!this.azureOpenAIApiDeploymentName) {
        throw new Error("Azure OpenAI API deployment name not found");
      }
      if (!this.azureOpenAIApiVersion) {
        throw new Error("Azure OpenAI API version not found");
      }
    }
    this.clientConfig = {
      apiKey,
      ...configuration2
    };
  }
  invocationParams() {
    return {
      model: this.modelName,
      temperature: this.temperature,
      top_p: this.topP,
      frequency_penalty: this.frequencyPenalty,
      presence_penalty: this.presencePenalty,
      n: this.n,
      logit_bias: this.logitBias,
      max_tokens: this.maxTokens === -1 ? void 0 : this.maxTokens,
      stop: this.stop,
      stream: this.streaming,
      ...this.modelKwargs
    };
  }
  _identifyingParams() {
    return {
      model_name: this.modelName,
      ...this.invocationParams(),
      ...this.clientConfig
    };
  }
  identifyingParams() {
    return {
      model_name: this.modelName,
      ...this.invocationParams(),
      ...this.clientConfig
    };
  }
  formatMessages(prompt) {
    const message = {
      role: "user",
      content: prompt
    };
    return this.prefixMessages ? [...this.prefixMessages, message] : [message];
  }
  async _call(prompt, options2, runManager) {
    var _a, _b;
    const { stop } = options2;
    const params = this.invocationParams();
    params.stop = stop != null ? stop : params.stop;
    const data2 = params.stream ? await new Promise((resolve, reject) => {
      let response;
      let rejected = false;
      let resolved = false;
      this.completionWithRetry({
        ...params,
        messages: this.formatMessages(prompt)
      }, {
        signal: options2.signal,
        ...options2.options,
        adapter: fetchAdapter,
        responseType: "stream",
        onmessage: (event) => {
          var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j;
          if (((_b2 = (_a2 = event.data) == null ? void 0 : _a2.trim) == null ? void 0 : _b2.call(_a2)) === "[DONE]") {
            if (resolved) {
              return;
            }
            resolved = true;
            resolve(response);
          } else {
            const message = JSON.parse(event.data);
            if (!response) {
              response = {
                id: message.id,
                object: message.object,
                created: message.created,
                model: message.model,
                choices: []
              };
            }
            for (const part of message.choices) {
              if (part != null) {
                let choice = response.choices.find((c) => c.index === part.index);
                if (!choice) {
                  choice = {
                    index: part.index,
                    finish_reason: (_c = part.finish_reason) != null ? _c : void 0
                  };
                  response.choices.push(choice);
                }
                if (!choice.message) {
                  choice.message = {
                    role: (_d = part.delta) == null ? void 0 : _d.role,
                    content: (_f = (_e = part.delta) == null ? void 0 : _e.content) != null ? _f : ""
                  };
                }
                choice.message.content += (_h = (_g = part.delta) == null ? void 0 : _g.content) != null ? _h : "";
                void (runManager == null ? void 0 : runManager.handleLLMNewToken((_j = (_i = part.delta) == null ? void 0 : _i.content) != null ? _j : ""));
              }
            }
            if (!resolved && message.choices.every((c) => c.finish_reason != null)) {
              resolved = true;
              resolve(response);
            }
          }
        }
      }).catch((error) => {
        if (!rejected) {
          rejected = true;
          reject(error);
        }
      });
    }) : await this.completionWithRetry({
      ...params,
      messages: this.formatMessages(prompt)
    }, {
      signal: options2.signal,
      ...options2.options
    });
    return (_b = (_a = data2.choices[0].message) == null ? void 0 : _a.content) != null ? _b : "";
  }
  async completionWithRetry(request2, options2) {
    if (!this.client) {
      const endpoint = this.azureOpenAIApiKey ? `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${this.azureOpenAIApiDeploymentName}` : this.clientConfig.basePath;
      const clientConfig = new dist$1.Configuration({
        ...this.clientConfig,
        basePath: endpoint,
        baseOptions: {
          timeout: this.timeout,
          ...this.clientConfig.baseOptions
        }
      });
      this.client = new dist$1.OpenAIApi(clientConfig);
    }
    const axiosOptions = {
      adapter: isNode() ? void 0 : fetchAdapter,
      ...this.clientConfig.baseOptions,
      ...options2
    };
    if (this.azureOpenAIApiKey) {
      axiosOptions.headers = {
        "api-key": this.azureOpenAIApiKey,
        ...axiosOptions.headers
      };
      axiosOptions.params = {
        "api-version": this.azureOpenAIApiVersion,
        ...axiosOptions.params
      };
    }
    return this.caller.call(this.client.createChatCompletion.bind(this.client), request2, axiosOptions).then((res) => res.data);
  }
  _llmType() {
    return "openai";
  }
}
class PromptLayerOpenAIChat extends OpenAIChat {
  constructor(fields) {
    var _a, _b, _c;
    super(fields);
    Object.defineProperty(this, "promptLayerApiKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "plTags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "returnPromptLayerId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.plTags = (_a = fields == null ? void 0 : fields.plTags) != null ? _a : [];
    this.returnPromptLayerId = (_b = fields == null ? void 0 : fields.returnPromptLayerId) != null ? _b : false;
    this.promptLayerApiKey = (_c = fields == null ? void 0 : fields.promptLayerApiKey) != null ? _c : getEnvironmentVariable("PROMPTLAYER_API_KEY");
    if (!this.promptLayerApiKey) {
      throw new Error("Missing PromptLayer API key");
    }
  }
  async completionWithRetry(request2, options2) {
    if (request2.stream) {
      return super.completionWithRetry(request2, options2);
    }
    const response = await super.completionWithRetry(request2);
    return response;
  }
  async _generate(prompts, options2, runManager) {
    let choice;
    const generations = await Promise.all(prompts.map(async (prompt) => {
      const requestStartTime = Date.now();
      const text2 = await this._call(prompt, options2, runManager);
      const requestEndTime = Date.now();
      choice = [{ text: text2 }];
      const parsedResp = {
        text: text2
      };
      const promptLayerRespBody = await promptLayerTrackRequest(this.caller, "langchain.PromptLayerOpenAIChat", [prompt], this._identifyingParams(), this.plTags, parsedResp, requestStartTime, requestEndTime, this.promptLayerApiKey);
      if (this.returnPromptLayerId === true && promptLayerRespBody.success === true) {
        choice[0].generationInfo = {
          promptLayerRequestId: promptLayerRespBody.request_id
        };
      }
      return choice;
    }));
    return { generations };
  }
}
class OpenAI extends BaseLLM {
  get callKeys() {
    return ["stop", "signal", "timeout", "options"];
  }
  constructor(fields, configuration2) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;
    if (((_a = fields == null ? void 0 : fields.modelName) == null ? void 0 : _a.startsWith("gpt-3.5-turbo")) || ((_b = fields == null ? void 0 : fields.modelName) == null ? void 0 : _b.startsWith("gpt-4")) || ((_c = fields == null ? void 0 : fields.modelName) == null ? void 0 : _c.startsWith("gpt-4-32k"))) {
      return new OpenAIChat(fields, configuration2);
    }
    super(fields != null ? fields : {});
    Object.defineProperty(this, "temperature", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0.7
    });
    Object.defineProperty(this, "maxTokens", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 256
    });
    Object.defineProperty(this, "topP", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(this, "frequencyPenalty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "presencePenalty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "n", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(this, "bestOf", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(this, "logitBias", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "modelName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "text-davinci-003"
    });
    Object.defineProperty(this, "modelKwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "batchSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 20
    });
    Object.defineProperty(this, "timeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stop", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "streaming", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "azureOpenAIApiVersion", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "azureOpenAIApiKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "azureOpenAIApiInstanceName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "azureOpenAIApiDeploymentName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "client", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clientConfig", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    const apiKey = (_d = fields == null ? void 0 : fields.openAIApiKey) != null ? _d : getEnvironmentVariable("OPENAI_API_KEY");
    const azureApiKey = (_e = fields == null ? void 0 : fields.azureOpenAIApiKey) != null ? _e : getEnvironmentVariable("AZURE_OPENAI_API_KEY");
    if (!azureApiKey && !apiKey) {
      throw new Error("(Azure) OpenAI API key not found");
    }
    const azureApiInstanceName = (_f = fields == null ? void 0 : fields.azureOpenAIApiInstanceName) != null ? _f : getEnvironmentVariable("AZURE_OPENAI_API_INSTANCE_NAME");
    const azureApiDeploymentName = (_g = (fields == null ? void 0 : fields.azureOpenAIApiCompletionsDeploymentName) || (fields == null ? void 0 : fields.azureOpenAIApiDeploymentName)) != null ? _g : getEnvironmentVariable("AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME") || getEnvironmentVariable("AZURE_OPENAI_API_DEPLOYMENT_NAME");
    const azureApiVersion = (_h = fields == null ? void 0 : fields.azureOpenAIApiVersion) != null ? _h : getEnvironmentVariable("AZURE_OPENAI_API_VERSION");
    this.modelName = (_i = fields == null ? void 0 : fields.modelName) != null ? _i : this.modelName;
    this.modelKwargs = (_j = fields == null ? void 0 : fields.modelKwargs) != null ? _j : {};
    this.batchSize = (_k = fields == null ? void 0 : fields.batchSize) != null ? _k : this.batchSize;
    this.timeout = fields == null ? void 0 : fields.timeout;
    this.temperature = (_l = fields == null ? void 0 : fields.temperature) != null ? _l : this.temperature;
    this.maxTokens = (_m = fields == null ? void 0 : fields.maxTokens) != null ? _m : this.maxTokens;
    this.topP = (_n = fields == null ? void 0 : fields.topP) != null ? _n : this.topP;
    this.frequencyPenalty = (_o = fields == null ? void 0 : fields.frequencyPenalty) != null ? _o : this.frequencyPenalty;
    this.presencePenalty = (_p = fields == null ? void 0 : fields.presencePenalty) != null ? _p : this.presencePenalty;
    this.n = (_q = fields == null ? void 0 : fields.n) != null ? _q : this.n;
    this.bestOf = (_r = fields == null ? void 0 : fields.bestOf) != null ? _r : this.bestOf;
    this.logitBias = fields == null ? void 0 : fields.logitBias;
    this.stop = fields == null ? void 0 : fields.stop;
    this.streaming = (_s = fields == null ? void 0 : fields.streaming) != null ? _s : false;
    this.azureOpenAIApiVersion = azureApiVersion;
    this.azureOpenAIApiKey = azureApiKey;
    this.azureOpenAIApiInstanceName = azureApiInstanceName;
    this.azureOpenAIApiDeploymentName = azureApiDeploymentName;
    if (this.streaming && this.n > 1) {
      throw new Error("Cannot stream results when n > 1");
    }
    if (this.streaming && this.bestOf > 1) {
      throw new Error("Cannot stream results when bestOf > 1");
    }
    if (this.azureOpenAIApiKey) {
      if (!this.azureOpenAIApiInstanceName) {
        throw new Error("Azure OpenAI API instance name not found");
      }
      if (!this.azureOpenAIApiDeploymentName) {
        throw new Error("Azure OpenAI API deployment name not found");
      }
      if (!this.azureOpenAIApiVersion) {
        throw new Error("Azure OpenAI API version not found");
      }
    }
    this.clientConfig = {
      apiKey,
      ...configuration2
    };
  }
  invocationParams() {
    return {
      model: this.modelName,
      temperature: this.temperature,
      max_tokens: this.maxTokens,
      top_p: this.topP,
      frequency_penalty: this.frequencyPenalty,
      presence_penalty: this.presencePenalty,
      n: this.n,
      best_of: this.bestOf,
      logit_bias: this.logitBias,
      stop: this.stop,
      stream: this.streaming,
      ...this.modelKwargs
    };
  }
  _identifyingParams() {
    return {
      model_name: this.modelName,
      ...this.invocationParams(),
      ...this.clientConfig
    };
  }
  identifyingParams() {
    return this._identifyingParams();
  }
  async _generate(prompts, options2, runManager) {
    var _a, _b, _c, _d;
    const { stop } = options2;
    const subPrompts = chunkArray(prompts, this.batchSize);
    const choices = [];
    const tokenUsage = {};
    if (this.stop && stop) {
      throw new Error("Stop found in input and default params");
    }
    const params = this.invocationParams();
    params.stop = stop != null ? stop : params.stop;
    if (params.max_tokens === -1) {
      if (prompts.length !== 1) {
        throw new Error("max_tokens set to -1 not supported for multiple inputs");
      }
      params.max_tokens = await calculateMaxTokens({
        prompt: prompts[0],
        modelName: this.modelName
      });
    }
    for (let i = 0; i < subPrompts.length; i += 1) {
      const data2 = params.stream ? await new Promise((resolve, reject) => {
        const choices2 = [];
        let response;
        let rejected = false;
        let resolved = false;
        this.completionWithRetry({
          ...params,
          prompt: subPrompts[i]
        }, {
          signal: options2.signal,
          ...options2.options,
          adapter: fetchAdapter,
          responseType: "stream",
          onmessage: (event) => {
            var _a2, _b2, _c2, _d2, _e;
            if (((_b2 = (_a2 = event.data) == null ? void 0 : _a2.trim) == null ? void 0 : _b2.call(_a2)) === "[DONE]") {
              if (resolved) {
                return;
              }
              resolved = true;
              resolve({
                ...response,
                choices: choices2
              });
            } else {
              const message = JSON.parse(event.data);
              if (!response) {
                response = {
                  id: message.id,
                  object: message.object,
                  created: message.created,
                  model: message.model
                };
              }
              for (const part of message.choices) {
                if (part != null && part.index != null) {
                  if (!choices2[part.index])
                    choices2[part.index] = {};
                  const choice = choices2[part.index];
                  choice.text = ((_c2 = choice.text) != null ? _c2 : "") + ((_d2 = part.text) != null ? _d2 : "");
                  choice.finish_reason = part.finish_reason;
                  choice.logprobs = part.logprobs;
                  void (runManager == null ? void 0 : runManager.handleLLMNewToken((_e = part.text) != null ? _e : ""));
                }
              }
              if (!resolved && choices2.every((c) => c.finish_reason != null)) {
                resolved = true;
                resolve({
                  ...response,
                  choices: choices2
                });
              }
            }
          }
        }).catch((error) => {
          if (!rejected) {
            rejected = true;
            reject(error);
          }
        });
      }) : await this.completionWithRetry({
        ...params,
        prompt: subPrompts[i]
      }, {
        signal: options2.signal,
        ...options2.options
      });
      choices.push(...data2.choices);
      const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens } = (_a = data2.usage) != null ? _a : {};
      if (completionTokens) {
        tokenUsage.completionTokens = ((_b = tokenUsage.completionTokens) != null ? _b : 0) + completionTokens;
      }
      if (promptTokens) {
        tokenUsage.promptTokens = ((_c = tokenUsage.promptTokens) != null ? _c : 0) + promptTokens;
      }
      if (totalTokens) {
        tokenUsage.totalTokens = ((_d = tokenUsage.totalTokens) != null ? _d : 0) + totalTokens;
      }
    }
    const generations = chunkArray(choices, this.n).map((promptChoices) => promptChoices.map((choice) => {
      var _a2;
      return {
        text: (_a2 = choice.text) != null ? _a2 : "",
        generationInfo: {
          finishReason: choice.finish_reason,
          logprobs: choice.logprobs
        }
      };
    }));
    return {
      generations,
      llmOutput: { tokenUsage }
    };
  }
  async completionWithRetry(request2, options2) {
    if (!this.client) {
      const endpoint = this.azureOpenAIApiKey ? `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${this.azureOpenAIApiDeploymentName}` : this.clientConfig.basePath;
      const clientConfig = new dist$1.Configuration({
        ...this.clientConfig,
        basePath: endpoint,
        baseOptions: {
          timeout: this.timeout,
          ...this.clientConfig.baseOptions
        }
      });
      this.client = new dist$1.OpenAIApi(clientConfig);
    }
    const axiosOptions = {
      adapter: isNode() ? void 0 : fetchAdapter,
      ...this.clientConfig.baseOptions,
      ...options2
    };
    if (this.azureOpenAIApiKey) {
      axiosOptions.headers = {
        "api-key": this.azureOpenAIApiKey,
        ...axiosOptions.headers
      };
      axiosOptions.params = {
        "api-version": this.azureOpenAIApiVersion,
        ...axiosOptions.params
      };
    }
    return this.caller.call(this.client.createCompletion.bind(this.client), request2, axiosOptions).then((res) => res.data);
  }
  _llmType() {
    return "openai";
  }
}
class PromptLayerOpenAI extends OpenAI {
  constructor(fields) {
    var _a, _b;
    super(fields);
    Object.defineProperty(this, "promptLayerApiKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "plTags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "returnPromptLayerId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.plTags = (_a = fields == null ? void 0 : fields.plTags) != null ? _a : [];
    this.promptLayerApiKey = (_b = fields == null ? void 0 : fields.promptLayerApiKey) != null ? _b : getEnvironmentVariable("PROMPTLAYER_API_KEY");
    this.returnPromptLayerId = fields == null ? void 0 : fields.returnPromptLayerId;
    if (!this.promptLayerApiKey) {
      throw new Error("Missing PromptLayer API key");
    }
  }
  async completionWithRetry(request2, options2) {
    if (request2.stream) {
      return super.completionWithRetry(request2, options2);
    }
    const response = await super.completionWithRetry(request2);
    return response;
  }
  async _generate(prompts, options2, runManager) {
    const requestStartTime = Date.now();
    const generations = await super._generate(prompts, options2, runManager);
    for (let i = 0; i < generations.generations.length; i += 1) {
      const requestEndTime = Date.now();
      const parsedResp = {
        text: generations.generations[i][0].text,
        llm_output: generations.llmOutput
      };
      const promptLayerRespBody = await promptLayerTrackRequest(this.caller, "langchain.PromptLayerOpenAI", [prompts[i]], this._identifyingParams(), this.plTags, parsedResp, requestStartTime, requestEndTime, this.promptLayerApiKey);
      let promptLayerRequestId;
      if (this.returnPromptLayerId === true) {
        if (promptLayerRespBody && promptLayerRespBody.success === true) {
          promptLayerRequestId = promptLayerRespBody.request_id;
        }
        generations.generations[i][0].generationInfo = {
          ...generations.generations[i][0].generationInfo,
          promptLayerRequestId
        };
      }
    }
    return generations;
  }
}
const openai = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  OpenAI,
  PromptLayerOpenAI,
  OpenAIChat,
  PromptLayerOpenAIChat
}, Symbol.toStringTag, { value: "Module" }));
function create_fragment(ctx) {
  let div;
  let h1;
  let t1;
  let input;
  let t2;
  let button;
  let t4;
  let span;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      h1 = element("h1");
      h1.textContent = "Basic Prompt";
      t1 = space();
      input = element("input");
      t2 = space();
      button = element("button");
      button.textContent = "Send Prompt";
      t4 = space();
      span = element("span");
      span.textContent = `${promptOutput}`;
      attr(input, "type", "text");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, h1);
      append(div, t1);
      append(div, input);
      set_input_value(input, ctx[0]);
      append(div, t2);
      append(div, button);
      append(div, t4);
      append(div, span);
      if (!mounted) {
        dispose = [
          listen(input, "input", ctx[3]),
          listen(button, "click", ctx[4])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && input.value !== ctx2[0]) {
        set_input_value(input, ctx2[0]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
let promptOutput = "res...";
function instance($$self, $$props, $$invalidate) {
  let promptInput = "";
  const openAIKey = "";
  new OpenAI({
    openAIApiKey: openAIKey,
    temperature: 0.4
  });
  async function sendPrompt(promptInput2) {
    console.log("input: " + promptInput2);
    console.log("api-key: " + openAIKey);
  }
  function input_input_handler() {
    promptInput = this.value;
    $$invalidate(0, promptInput);
  }
  const click_handler = () => {
    sendPrompt(promptInput);
  };
  return [promptInput, sendPrompt, openAIKey, input_input_handler, click_handler];
}
class BasicPrompt extends SvelteComponent {
  constructor(options2) {
    super();
    init(this, options2, instance, create_fragment, safe_not_equal, { openAIKey: 2 });
  }
  get openAIKey() {
    return this.$$.ctx[2];
  }
}
const VIEW_TYPE = "svelte-view";
const DEFAULT_SETTINGS = {
  mySetting: "default",
  openAI_API_Key: "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"
};
class BasicPromptView extends obsidian.ItemView {
  constructor(leaf, openAIKey) {
    super(leaf);
    this.openAIKey = openAIKey;
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "Basic Prompt";
  }
  getIcon() {
    return "dice";
  }
  async onOpen() {
    this.view = new BasicPrompt({ target: this.contentEl, props: { openAIKey: this.openAIKey } });
  }
}
class MyPlugin extends obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const openAIKey = this.settings.openAI_API_Key;
    this.registerView(
      VIEW_TYPE,
      (leaf) => this.view = new BasicPromptView(leaf, openAIKey)
    );
    this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
    this.addRibbonIcon("dice", "Sample Plugin", (evt) => this.openMapView());
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => this.openMapView()
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onLayoutReady() {
    if (this.app.workspace.getLeavesOfType(VIEW_TYPE).length) {
      return;
    }
    this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_TYPE
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async openMapView() {
    const workspace = this.app.workspace;
    workspace.detachLeavesOfType(VIEW_TYPE);
    const leaf = workspace.getLeaf(
      !obsidian.Platform.isMobile
    );
    await leaf.setViewState({ type: VIEW_TYPE });
    workspace.revealLeaf(leaf);
  }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text2) => text2.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
    new obsidian.Setting(containerEl).setName("openAI_API_Key").setDesc("Add your openAI API key here").addText((text2) => text2.setPlaceholder("enter key").setValue(this.plugin.settings.mySetting));
  }
}
exports.AIChatMessage = AIChatMessage;
exports.BaseLanguageModel = BaseLanguageModel;
exports.CallbackManager = CallbackManager;
exports.ChatMessage = ChatMessage;
exports.HumanChatMessage = HumanChatMessage;
exports.MyPlugin = MyPlugin;
exports.RUN_KEY = RUN_KEY;
exports.SystemChatMessage = SystemChatMessage;
exports.dist = dist$1;
exports.fetchAdapter = fetchAdapter;
exports.getEnvironmentVariable = getEnvironmentVariable;
exports.getModelNameForTiktoken = getModelNameForTiktoken;
exports.isNode = isNode;
exports.promptLayerTrackRequest = promptLayerTrackRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
